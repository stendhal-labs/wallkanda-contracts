{
  "address": "0x2f35Cded0528b0E5802065C6b47CB9fe95510318",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serviceFee",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "name": "CloseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "outAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "inAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderData",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageSigning.Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "_validateOrderSig",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "outAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "inAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderData",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageSigning.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderMeta",
          "name": "saleMeta",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageSigning.Signature",
          "name": "saleMetaSignature",
          "type": "tuple"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "completed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "outAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "inAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderData",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderMeta",
          "name": "saleMeta",
          "type": "tuple"
        }
      ],
      "name": "computeValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerEndValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTransaction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "serviceFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesRecipient",
              "type": "address"
            }
          ],
          "internalType": "struct BaseExchange.OrderTransfers",
          "name": "orderTransfers",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "transferProxy_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "exchangeSigner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "outAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum ExchangeStorage.TokenType",
                  "name": "tokenType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ExchangeStorage.Asset",
              "name": "inAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderData",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "prepareOrderMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageSigning.Signature",
          "name": "orderSig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeStorage.OrderMeta",
          "name": "saleMeta",
          "type": "tuple"
        }
      ],
      "name": "prepareOrderMetaMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageSigning.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "recoverMessageSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "beneficiary_",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exchangeSigner_",
          "type": "address"
        }
      ],
      "name": "setExchangeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "transferProxy_",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxy",
      "outputs": [
        {
          "internalType": "contract ITransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedSaleMeta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x02feee322a3f782c9af9d57957d0d1f90c61ccb258be477b85d46de8974a1709",
  "receipt": {
    "to": null,
    "from": "0xd9a5Da84b0866DcA49e20B753f5dC4d64B291481",
    "contractAddress": "0x2f35Cded0528b0E5802065C6b47CB9fe95510318",
    "transactionIndex": 0,
    "gasUsed": "1821075",
    "logsBloom": "0x
    "blockHash": "0xf29617d7cb1352ef209107e7bcf3ab89f9139329f8ae80840fe69bd0a3e811c1",
    "transactionHash": "0x02feee322a3f782c9af9d57957d0d1f90c61ccb258be477b85d46de8974a1709",
    "logs": [],
    "blockNumber": 8901866,
    "cumulativeGasUsed": "1821075",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "80601d6a6b56ac8a03724935cad09c51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"CloseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"_validateOrderSig\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderMeta\",\"name\":\"saleMeta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"saleMetaSignature\",\"type\":\"tuple\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderMeta\",\"name\":\"saleMeta\",\"type\":\"tuple\"}],\"name\":\"computeValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerEndValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"}],\"internalType\":\"struct BaseExchange.OrderTransfers\",\"name\":\"orderTransfers\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferProxy_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeSigner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"outAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ExchangeStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.Asset\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareOrderMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"orderSig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeStorage.OrderMeta\",\"name\":\"saleMeta\",\"type\":\"tuple\"}],\"name\":\"prepareOrderMetaMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageSigning.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"recoverMessageSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeSigner_\",\"type\":\"address\"}],\"name\":\"setExchangeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferProxy_\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract ITransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedSaleMeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeValues((address,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),uint256,uint256,uint256),uint256,(address,uint256,uint256,uint256,uint256))\":{\"details\":\"this function computes all the values that we need for the exchange. this can be called off-chain before buying so all values can be computed easily It will also help when we introduce tokens for payment\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverMessageSignature(bytes32,(uint8,bytes32,bytes32))\":{\"details\":\"verifies signature\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExchangeSigner(address)\":{\"details\":\"Allows owner to set the address used to sign the sales Metadata\",\"params\":{\"exchangeSigner_\":\"address of the signer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sales/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/Proxys/Transfer/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferProxy {\\n    function erc721SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae5dd051ab1109cfc458dba0bd390410275ac1ae85510387347771f32fcbfa3b\",\"license\":\"MIT\"},\"contracts/Sales/BaseExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\nimport '../Security/MessageSigning.sol';\\nimport '../Tokens/ERC2981/IERC2981Royalties.sol';\\n\\ncontract BaseExchange is OwnableUpgradeable, MessageSigning {\\n    address payable public beneficiary;\\n    ITransferProxy public transferProxy;\\n\\n    struct OrderTransfers {\\n        /* total order value */\\n        uint256 total;\\n        /* total value for seller (total - sellerServiceFees - royalties) */\\n        uint256 sellerEndValue;\\n        /* total transaction */\\n        uint256 totalTransaction;\\n        /* all service fees */\\n        uint256 serviceFees;\\n        /* royalties amount to transfer */\\n        uint256 royaltiesAmount;\\n        /* royalties recipient */\\n        address royaltiesRecipient;\\n    }\\n\\n    function __BaseExchange_init(\\n        address payable _beneficiary,\\n        address _transferProxy\\n    ) internal initializer {\\n        __Ownable_init();\\n\\n        setBeneficiary(_beneficiary);\\n        setTransferProxy(_transferProxy);\\n    }\\n\\n    function setTransferProxy(address transferProxy_) public virtual onlyOwner {\\n        require(transferProxy_ != address(0));\\n        transferProxy = ITransferProxy(transferProxy_);\\n    }\\n\\n    function setBeneficiary(address payable beneficiary_)\\n        public\\n        virtual\\n        onlyOwner\\n    {\\n        require(beneficiary_ != address(0));\\n        beneficiary = beneficiary_;\\n    }\\n\\n    function _computeValues(\\n        uint256 unitPrice,\\n        address token,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 buyerServiceFee,\\n        uint256 sellerServiceFee\\n    ) internal view returns (OrderTransfers memory orderTransfers) {\\n        orderTransfers.total = unitPrice * amount;\\n        uint256 buyerFee = (orderTransfers.total * buyerServiceFee) / 10000;\\n        uint256 sellerFee = (orderTransfers.total * sellerServiceFee) / 10000;\\n\\n        // total of transaction value (price + buyerFee)\\n        orderTransfers.totalTransaction = orderTransfers.total + buyerFee;\\n        // seller end value: price - sellerFee\\n        orderTransfers.sellerEndValue = orderTransfers.total - sellerFee;\\n        // all fees\\n        orderTransfers.serviceFees = sellerFee + buyerFee;\\n\\n        (address royaltiesRecipient, uint256 royaltiesAmount) = _getRoyalties(\\n            token,\\n            tokenId,\\n            orderTransfers.total\\n        );\\n\\n        // if there are royalties\\n        if (\\n            royaltiesAmount > 0 &&\\n            royaltiesAmount <= orderTransfers.sellerEndValue\\n        ) {\\n            orderTransfers.royaltiesRecipient = royaltiesRecipient;\\n            orderTransfers.royaltiesAmount = royaltiesAmount;\\n            // substract royalties to end value\\n            orderTransfers.sellerEndValue =\\n                orderTransfers.sellerEndValue -\\n                royaltiesAmount;\\n        }\\n    }\\n\\n    function _getRoyalties(\\n        address token,\\n        uint256 tokenId,\\n        uint256 saleValue\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (address royaltiesRecipient, uint256 royaltiesAmount)\\n    {\\n        IERC2981Royalties withRoyalties = IERC2981Royalties(token);\\n        if (\\n            withRoyalties.supportsInterface(type(IERC2981Royalties).interfaceId)\\n        ) {\\n            (royaltiesRecipient, royaltiesAmount) = withRoyalties.royaltyInfo(\\n                tokenId,\\n                saleValue\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x945b872b13cdb7074e2e3096c8a40a626da8f1cfe098974243bfe228c3834690\",\"license\":\"MIT\"},\"contracts/Sales/Exchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\n\\nimport './BaseExchange.sol';\\nimport './ExchangeStorage.sol';\\n\\ncontract Exchange is BaseExchange, ReentrancyGuardUpgradeable, ExchangeStorage {\\n    function initialize(\\n        address payable beneficiary_,\\n        address transferProxy_,\\n        address exchangeSigner_\\n    ) public initializer {\\n        __BaseExchange_init(beneficiary_, transferProxy_);\\n\\n        __ReentrancyGuard_init_unchained();\\n\\n        setExchangeSigner(exchangeSigner_);\\n    }\\n\\n    /// @dev Allows owner to set the address used to sign the sales Metadata\\n    /// @param exchangeSigner_ address of the signer\\n    function setExchangeSigner(address exchangeSigner_) public onlyOwner {\\n        require(exchangeSigner_ != address(0), 'Exchange signer must be valid');\\n        exchangeSigner = exchangeSigner_;\\n    }\\n\\n    function prepareOrderMessage(OrderData memory order)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(order));\\n    }\\n\\n    function prepareOrderMetaMessage(\\n        Signature memory orderSig,\\n        OrderMeta memory saleMeta\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(orderSig, saleMeta));\\n    }\\n\\n    /**\\n     * @dev this function computes all the values that we need for the exchange.\\n     * this can be called off-chain before buying so all values can be computed easily\\n     *\\n     * It will also help when we introduce tokens for payment\\n     */\\n    function computeValues(\\n        OrderData memory order,\\n        uint256 amount,\\n        OrderMeta memory saleMeta\\n    ) public view returns (OrderTransfers memory orderTransfers) {\\n        return\\n            _computeValues(\\n                order.inAsset.quantity,\\n                order.outAsset.token,\\n                order.outAsset.tokenId,\\n                amount,\\n                saleMeta.buyerFee,\\n                saleMeta.sellerFee\\n            );\\n    }\\n\\n    function buy(\\n        OrderData memory order,\\n        Signature memory sig,\\n        uint256 amount, // quantity to buy\\n        OrderMeta memory saleMeta,\\n        Signature memory saleMetaSignature\\n    ) external payable nonReentrant {\\n        // verify that order is for this contract\\n        require(order.exchange == address(this), 'Sale: Wrong exchange.');\\n\\n        // verify if this order is for a specific address\\n        if (order.taker != address(0)) {\\n            require(msg.sender == order.taker, 'Sale: Wrong user.');\\n        }\\n\\n        require(\\n            // amount must be > 0\\n            (amount > 0) &&\\n                // and amount must be <= at maxPerBuy\\n                (order.maxPerBuy == 0 || amount <= order.maxPerBuy),\\n            'Sale: Wrong amount.'\\n        );\\n\\n        // verify exchange meta for buy\\n        _verifyOrderMeta(sig, saleMeta, saleMetaSignature);\\n\\n        // verify order signature\\n        _validateOrderSig(order, sig);\\n\\n        // update order state\\n        bool closed = _verifyOpenAndModifyState(order, amount);\\n\\n        // transfer everything\\n        OrderTransfers memory orderTransfers = _doTransfers(\\n            order,\\n            amount,\\n            saleMeta\\n        );\\n\\n        // emit buy\\n        emit Buy(\\n            order.orderNonce,\\n            order.outAsset.token,\\n            order.outAsset.tokenId,\\n            amount,\\n            order.maker,\\n            order.inAsset.token,\\n            order.inAsset.tokenId,\\n            order.inAsset.quantity,\\n            msg.sender,\\n            orderTransfers.total,\\n            orderTransfers.serviceFees\\n        );\\n\\n        // if order is closed, emit close.\\n        if (closed) {\\n            emit CloseOrder(\\n                order.orderNonce,\\n                order.outAsset.token,\\n                order.outAsset.tokenId,\\n                order.maker\\n            );\\n        }\\n    }\\n\\n    function cancelOrder(\\n        address token,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 orderNonce\\n    ) public {\\n        bytes32 orderId = _getOrderId(\\n            token,\\n            tokenId,\\n            quantity,\\n            msg.sender,\\n            orderNonce\\n        );\\n        completed[orderId] = quantity;\\n        emit CloseOrder(orderNonce, token, tokenId, msg.sender);\\n    }\\n\\n    function _validateOrderSig(OrderData memory order, Signature memory sig)\\n        public\\n        pure\\n    {\\n        require(\\n            recoverMessageSignature(prepareOrderMessage(order), sig) ==\\n                order.maker,\\n            'Sale: Incorrect order signature'\\n        );\\n    }\\n\\n    // returns orderId for completion\\n    function _getOrderId(\\n        address token,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address maker,\\n        uint256 orderNonce\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(abi.encode(token, tokenId, quantity, maker, orderNonce));\\n    }\\n\\n    function _verifyOpenAndModifyState(\\n        OrderData memory order,\\n        uint256 buyingAmount\\n    ) internal returns (bool) {\\n        bytes32 orderId = _getOrderId(\\n            order.outAsset.token,\\n            order.outAsset.tokenId,\\n            order.outAsset.quantity,\\n            order.maker,\\n            order.orderNonce\\n        );\\n        uint256 comp = completed[orderId] + buyingAmount;\\n\\n        // makes sure order is not already closed\\n        require(\\n            comp <= order.outAsset.quantity,\\n            'Sale: Order already closed or quantity too high'\\n        );\\n\\n        // update order completion amount\\n        completed[orderId] = comp;\\n\\n        // returns if order is closed or not\\n        return comp == order.outAsset.quantity;\\n    }\\n\\n    /// @dev This function verifies meta for an order\\n    ///      We use meta to have buyerFee and sellerFee per transaction instead of global\\n    ///      this also allows to not have open ended orders that could be reused months after it was made\\n    /// @param orderSig the signature of the order\\n    /// @param saleMeta the meta for this sale\\n    /// @param saleSig signature for this sale\\n    function _verifyOrderMeta(\\n        Signature memory orderSig,\\n        OrderMeta memory saleMeta,\\n        Signature memory saleSig\\n    ) internal {\\n        require(\\n            saleMeta.expiration == 0 || saleMeta.expiration >= block.timestamp,\\n            'Sale: Buy Order expired'\\n        );\\n\\n        require(saleMeta.buyer == msg.sender, 'Sale Metadata not for operator');\\n\\n        // verifies that saleSig is right\\n        bytes32 message = prepareOrderMetaMessage(orderSig, saleMeta);\\n        require(\\n            recoverMessageSignature(message, saleSig) == exchangeSigner,\\n            'Sale: Incorrect order meta signature'\\n        );\\n\\n        require(usedSaleMeta[message] == false, 'Sale Metadata already used');\\n\\n        usedSaleMeta[message] = true;\\n    }\\n\\n    function _doTransfers(\\n        OrderData memory order,\\n        uint256 amount,\\n        OrderMeta memory saleMeta\\n    ) internal returns (OrderTransfers memory orderTransfers) {\\n        // get all values into a struct\\n        // it will help later when we introduce token payments\\n        orderTransfers = computeValues(order, amount, saleMeta);\\n\\n        // this here is because we're not using tokens\\n        // verify that msg.value is right\\n        require(\\n            // total = (unitPrice * amount) + buyerFee\\n            msg.value == orderTransfers.totalTransaction,\\n            'Sale: Sent value is incorrect'\\n        );\\n\\n        // transfer ethereum\\n        if (orderTransfers.totalTransaction > 0) {\\n            // send service fees (buyerFee + sellerFees) to beneficiary\\n            if (orderTransfers.serviceFees > 0) {\\n                beneficiary.transfer(orderTransfers.serviceFees);\\n            }\\n\\n            if (orderTransfers.royaltiesAmount > 0) {\\n                payable(orderTransfers.royaltiesRecipient).transfer(\\n                    orderTransfers.royaltiesAmount\\n                );\\n            }\\n\\n            // send what is left to seller\\n            if (orderTransfers.sellerEndValue > 0) {\\n                payable(order.maker).transfer(orderTransfers.sellerEndValue);\\n            }\\n        }\\n\\n        // send token to buyer\\n        if (order.outAsset.tokenType == TokenType.ERC1155) {\\n            transferProxy.erc1155SafeTransferFrom(\\n                order.outAsset.token,\\n                order.maker,\\n                msg.sender,\\n                order.outAsset.tokenId,\\n                amount,\\n                ''\\n            );\\n        } else {\\n            transferProxy.erc721SafeTransferFrom(\\n                order.outAsset.token,\\n                order.maker,\\n                msg.sender,\\n                order.outAsset.tokenId,\\n                ''\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b3f2f5c7b9b13bc85a5ce0d11187734680f04a7af1917065b272db756ce41a\",\"license\":\"MIT\"},\"contracts/Sales/ExchangeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\nimport '../Tokens/ERC2981/IERC2981Royalties.sol';\\n\\ncontract ExchangeStorage {\\n    enum TokenType {\\n        ETH,\\n        ERC20,\\n        ERC1155,\\n        ERC721\\n    }\\n\\n    event Buy(\\n        uint256 indexed orderNonce,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        address maker,\\n        address buyToken,\\n        uint256 buyTokenId,\\n        uint256 buyAmount,\\n        address buyer,\\n        uint256 total,\\n        uint256 serviceFee\\n    );\\n\\n    event CloseOrder(\\n        uint256 orderNonce,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        address maker\\n    );\\n\\n    struct Asset {\\n        /* asset type, erc721 or erc1155 */\\n        TokenType tokenType;\\n        /* asset contract  */\\n        address token;\\n        /* asset id */\\n        uint256 tokenId;\\n        /* asset quantity */\\n        uint256 quantity;\\n    }\\n\\n    struct OrderData {\\n        /* Exchange address - should be current contract */\\n        address exchange;\\n        /* maker of the order */\\n        address maker;\\n        /* taker of the order */\\n        address taker;\\n        /* out asset */\\n        Asset outAsset;\\n        /* in asset: this is the UNIT PRICE; which means amount bought must be multiplicated by quantity here */\\n        Asset inAsset;\\n        /* Max items by each buy. Allow to create one big order, but to limit how many can be bought at once */\\n        uint256 maxPerBuy;\\n        /* OrderNonce so we can have different order for the same tokenId */\\n        uint256 orderNonce;\\n        /* expiration date for this order - usually 1 month | 0 means never expires */\\n        uint256 expiration;\\n    }\\n\\n    struct OrderMeta {\\n        /* buyer */\\n        address buyer;\\n        /* seller fee for the sale */\\n        uint256 sellerFee;\\n        /* buyer fee for the sale */\\n        uint256 buyerFee;\\n        /* expiration for this sale - usually 24h | 0 means never expires */\\n        uint256 expiration;\\n        /* Order Meta nonce so it can only be used once */\\n        uint256 nonce;\\n    }\\n\\n    // signer used to sign \\\"buys\\\"\\n    // this allows to have buyer and sellerFee per tx and not global\\n    // this also allows to invalidate orders without needed them to be canceled\\n    // in the contract since a buy can't be done without being signed\\n    address public exchangeSigner;\\n\\n    // To register saleMeta that were already used\\n    mapping(bytes32 => bool) public usedSaleMeta;\\n\\n    // orderId => completed amount\\n    mapping(bytes32 => uint256) public completed;\\n}\\n\",\"keccak256\":\"0x0f971b726dcf3affb84455e43896222c831c33272284e291e9cc03c7705d9143\",\"license\":\"MIT\"},\"contracts/Security/MessageSigning.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract MessageSigning {\\n    /* An ECDSA signature. */\\n    struct Signature {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n\\n    /**\\n     * @dev verifies signature\\n     */\\n    function recoverMessageSignature(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        uint8 v = signature.v;\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        return\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        '\\\\x19Ethereum Signed Message:\\\\n32',\\n                        message\\n                    )\\n                ),\\n                v,\\n                signature.r,\\n                signature.s\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x762eaefd87222d3d46ff7a1ad0f49c5304032cbd9f667d5b667f2211445e40eb\",\"license\":\"MIT\"},\"contracts/Tokens/ERC2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\n/**\\n * Early implementation of EIP-2981 as of comment\\n * https://github.com/ethereum/EIPs/issues/2907#issuecomment-831352868\\n *\\n * Interface ID:\\n *\\n * bytes4(keccak256('royaltyInfo(uint256,uint256,bytes)')) == 0xc155531d\\n *\\n * =>  0xc155531d\\n */\\ninterface IERC2981Royalties is IERC165Upgradeable {\\n    /**\\n     * @dev Returns an NFTs royalty payment information\\n     *\\n     * @param tokenId  The identifier for an NFT\\n     * @param value Purchase price of NFT\\n     *\\n     * @return receiver The royalty recipient address\\n     * @return royaltyAmount Amount to be paid to the royalty recipient\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xe689bf4ec1570868cc4b76f0f86c7c9381abd2d277dc41f0cedb3a914025f453\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ffc806100206000396000f3fe6080604052600436106101145760003560e01c80638ae42905116100a0578063e6c7bb8a11610064578063e6c7bb8a146102ba578063e9913135146102da578063f2fde38b14610307578063f4f7feca14610327578063f6419d961461035457610114565b80638ae42905146102185780638da5cb5b14610238578063a0cb68eb1461024d578063c0c53b8b1461026d578063d7f654891461028d57610114565b80632991e98d116100e75780632991e98d1461019957806338af3eed146101b95780636e667db3146101ce578063715018a6146101e35780637a490dae146101f857610114565b80630718a24f146101195780631bb5391e146101445780631c31f7101461015957806325feb6bc14610179575b600080fd5b34801561012557600080fd5b5061012e610374565b60405161013b91906118d8565b60405180910390f35b61015761015236600461178b565b610383565b005b34801561016557600080fd5b50610157610174366004611611565b61058d565b34801561018557600080fd5b5061012e610194366004611716565b610601565b3480156101a557600080fd5b506101576101b4366004611611565b6106a6565b3480156101c557600080fd5b5061012e61072d565b3480156101da57600080fd5b5061012e61073c565b3480156101ef57600080fd5b5061015761074b565b34801561020457600080fd5b5061015761021336600461175e565b6107d4565b34801561022457600080fd5b50610157610233366004611611565b61081e565b34801561024457600080fd5b5061012e610892565b34801561025957600080fd5b506101576102683660046116a4565b6108a1565b34801561027957600080fd5b5061015761028836600461162d565b610912565b34801561029957600080fd5b506102ad6102a8366004611742565b6109a5565b60405161013b91906119a6565b3480156102c657600080fd5b506102ad6102d5366004611831565b6109d6565b3480156102e657600080fd5b506102fa6102f53660046117f1565b610a09565b60405161013b9190611dc0565b34801561031357600080fd5b50610157610322366004611611565b610a49565b34801561033357600080fd5b506103476103423660046116fe565b610b0a565b60405161013b919061199b565b34801561036057600080fd5b506102ad61036f3660046116fe565b610b1f565b6099546001600160a01b031681565b600260675414156103af5760405162461bcd60e51b81526004016103a690611ce4565b60405180910390fd5b600260675584516001600160a01b031630146103dd5760405162461bcd60e51b81526004016103a6906119e2565b60408501516001600160a01b0316156104255784604001516001600160a01b0316336001600160a01b0316146104255760405162461bcd60e51b81526004016103a690611d1b565b600083118015610445575060a0850151158061044557508460a001518311155b6104615760405162461bcd60e51b81526004016103a690611bc5565b61046c848383610b31565b61047685856107d4565b60006104828685610c23565b90506000610491878686610cbe565b90508660600151604001518760600151602001516001600160a01b03168860c001517fc27fe7f59dae4fa236c251bd0c3eff967222f23417ad8ee7dd339e5f16fc1d1d888b602001518c60800151602001518d60800151604001518e6080015160600151338a600001518b60600151604051610514989796959493929190611e7b565b60405180910390a4811561057f578660600151604001518760600151602001516001600160a01b03167f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df498960c001518a60200151604051610576929190611e64565b60405180910390a35b505060016067555050505050565b610595610f11565b6001600160a01b03166105a6610892565b6001600160a01b0316146105cc5760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b0381166105df57600080fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b8051600090601b60ff821610156106205761061d601b82611f20565b90505b60018460405160200161063391906118a7565b6040516020818303038152906040528051906020012082856020015186604001516040516000815260200160405260405161067194939291906119af565b6020604051602081039080840390855afa158015610693573d6000803e3d6000fd5b5050604051601f19015195945050505050565b6106ae610f11565b6001600160a01b03166106bf610892565b6001600160a01b0316146106e55760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b03811661070b5760405162461bcd60e51b81526004016103a690611bf2565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031681565b6066546001600160a01b031681565b610753610f11565b6001600160a01b0316610764610892565b6001600160a01b03161461078a5760405162461bcd60e51b81526004016103a690611c29565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b81602001516001600160a01b03166107f46107ee846109a5565b83610601565b6001600160a01b03161461081a5760405162461bcd60e51b81526004016103a690611a57565b5050565b610826610f11565b6001600160a01b0316610837610892565b6001600160a01b03161461085d5760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b03811661087057600080fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031690565b60006108b08585853386610f15565b6000818152609b6020526040908190208590555190915084906001600160a01b038716907f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df49906109039086903390611e64565b60405180910390a35050505050565b600054610100900460ff168061092b575060005460ff16155b6109475760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff16158015610972576000805460ff1961ff0019909116610100171660011790555b61097c8484610f51565b610984610fe2565b61098d826106a6565b801561099f576000805461ff00191690555b50505050565b6000816040516020016109b89190611d46565b6040516020818303038152906040528051906020012090505b919050565b600082826040516020016109eb929190611e08565b60405160208183030381529060405280519060200120905092915050565b610a1161142d565b610a3f846080015160600151856060015160200151866060015160400151868660400151876020015161105c565b90505b9392505050565b610a51610f11565b6001600160a01b0316610a62610892565b6001600160a01b031614610a885760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b038116610aae5760405162461bcd60e51b81526004016103a690611a11565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b609a6020526000908152604090205460ff1681565b609b6020526000908152604090205481565b60608201511580610b46575042826060015110155b610b625760405162461bcd60e51b81526004016103a690611b40565b81516001600160a01b03163314610b8b5760405162461bcd60e51b81526004016103a690611c5e565b6000610b9784846109d6565b6099549091506001600160a01b0316610bb08284610601565b6001600160a01b031614610bd65760405162461bcd60e51b81526004016103a690611afc565b6000818152609a602052604090205460ff1615610c055760405162461bcd60e51b81526004016103a690611a8e565b6000908152609a60205260409020805460ff19166001179055505050565b600080610c5384606001516020015185606001516040015186606001516060015187602001518860c00151610f15565b6000818152609b602052604081205491925090610c71908590611f08565b9050846060015160600151811115610c9b5760405162461bcd60e51b81526004016103a690611c95565b6000918252609b6020526040909120819055606080850151015114905092915050565b610cc661142d565b610cd1848484610a09565b905080604001513414610cf65760405162461bcd60e51b81526004016103a690611ac5565b604081015115610de457606081015115610d4a5760655460608201516040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610d48573d6000803e3d6000fd5b505b608081015115610d97578060a001516001600160a01b03166108fc82608001519081150290604051600060405180830381858888f19350505050158015610d95573d6000803e3d6000fd5b505b602081015115610de45783602001516001600160a01b03166108fc82602001519081150290604051600060405180830381858888f19350505050158015610de2573d6000803e3d6000fd5b505b60026060850151516003811115610e0b57634e487b7160e01b600052602160045260246000fd5b1415610e91576066546060850151602080820151908701516040928301519251634aef795160e11b81526001600160a01b03909416936395def2a293610e5a9392913391908a90600401611925565b600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050610a42565b606654606085015160208082015190870151604092830151925163488b0f7d60e01b81526001600160a01b039094169363488b0f7d93610ed89392913391906004016118ec565b600060405180830381600087803b158015610ef257600080fd5b505af1158015610f06573d6000803e3d6000fd5b505050509392505050565b3390565b60008585858585604051602001610f30959493929190611968565b60405160208183030381529060405280519060200120905095945050505050565b600054610100900460ff1680610f6a575060005460ff16155b610f865760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff16158015610fb1576000805460ff1961ff0019909116610100171660011790555b610fb961114f565b610fc28361058d565b610fcb8261081e565b8015610fdd576000805461ff00191690555b505050565b600054610100900460ff1680610ffb575060005460ff16155b6110175760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff16158015611042576000805460ff1961ff0019909116610100171660011790555b60016067558015611059576000805461ff00191690555b50565b61106461142d565b61106e8488611f65565b80825260009061271090611083908690611f65565b61108d9190611f45565b905060006127108484600001516110a49190611f65565b6110ae9190611f45565b83519091506110be908390611f08565b604084015282516110d0908290611f84565b60208401526110df8282611f08565b6060840152825160009081906110f8908b908b906111d3565b91509150600081118015611110575084602001518111155b15611141576001600160a01b03821660a086015260808501819052602085015161113b908290611f84565b60208601525b505050509695505050505050565b600054610100900460ff1680611168575060005460ff16155b6111845760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff161580156111af576000805460ff1961ff0019909116610100171660011790555b6111b76112ee565b6111bf611361565b8015611059576000805461ff001916905550565b6040516301ffc9a760e01b8152600090819085906001600160a01b038216906301ffc9a79061120d9063152a902d60e11b906004016119cd565b60206040518083038186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906116de565b156112e55760405163152a902d60e11b81526001600160a01b03821690632a55205a906112909088908890600401611ec2565b604080518083038186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df9190611677565b90935091505b50935093915050565b600054610100900460ff1680611307575060005460ff16155b6113235760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff161580156111bf576000805460ff1961ff0019909116610100171660011790558015611059576000805461ff001916905550565b600054610100900460ff168061137a575060005460ff16155b6113965760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff161580156113c1576000805460ff1961ff0019909116610100171660011790555b60006113cb610f11565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611059576000805461ff001916905550565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b80356109d181611fb1565b600060808284031215611488578081fd5b6114926080611ed0565b90508135600481106114a357600080fd5b815260208201356114b381611fb1565b80602083015250604082013560408201526060820135606082015292915050565b60006101c082840312156114e6578081fd5b6114f1610100611ed0565b90506114fc8261146c565b815261150a6020830161146c565b602082015261151b6040830161146c565b604082015261152d8360608401611477565b606082015261153f8360e08401611477565b608082015261016082013560a082015261018082013560c08201526101a082013560e082015292915050565b600060a0828403121561157c578081fd5b61158660a0611ed0565b9050813561159381611fb1565b808252506020820135602082015260408201356040820152606082013560608201526080820135608082015292915050565b6000606082840312156115d6578081fd5b6115e06060611ed0565b9050813560ff811681146115f357600080fd5b80825250602082013560208201526040820135604082015292915050565b600060208284031215611622578081fd5b8135610a4281611fb1565b600080600060608486031215611641578182fd5b833561164c81611fb1565b9250602084013561165c81611fb1565b9150604084013561166c81611fb1565b809150509250925092565b60008060408385031215611689578182fd5b825161169481611fb1565b6020939093015192949293505050565b600080600080608085870312156116b9578081fd5b84356116c481611fb1565b966020860135965060408601359560600135945092505050565b6000602082840312156116ef578081fd5b81518015158114610a42578182fd5b60006020828403121561170f578081fd5b5035919050565b60008060808385031215611728578182fd5b8235915061173984602085016115c5565b90509250929050565b60006101c08284031215611754578081fd5b610a4283836114d4565b6000806102208385031215611771578182fd5b61177b84846114d4565b9150611739846101c085016115c5565b600080600080600061034086880312156117a3578283fd5b6117ad87876114d4565b94506117bd876101c088016115c5565b935061022086013592506117d587610240880161156b565b91506117e5876102e088016115c5565b90509295509295909350565b60008060006102808486031215611806578081fd5b61181085856114d4565b92506101c08401359150611828856101e0860161156b565b90509250925092565b6000806101008385031215611844578182fd5b61184e84846115c5565b9150611739846060850161156b565b80516004811061187d57634e487b7160e01b600052602160045260246000fd5b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160e01b031991909116815260200190565b60208082526015908201527429b0b6329d102bb937b7339032bc31b430b733b29760591b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601f908201527f53616c653a20496e636f7272656374206f72646572207369676e617475726500604082015260600190565b6020808252601a908201527f53616c65204d6574616461746120616c72656164792075736564000000000000604082015260600190565b6020808252601d908201527f53616c653a2053656e742076616c756520697320696e636f7272656374000000604082015260600190565b60208082526024908201527f53616c653a20496e636f7272656374206f72646572206d657461207369676e616040820152637475726560e01b606082015260800190565b60208082526017908201527f53616c653a20427579204f726465722065787069726564000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526013908201527229b0b6329d102bb937b7339030b6b7bab73a1760691b604082015260600190565b6020808252601d908201527f45786368616e6765207369676e6572206d7573742062652076616c6964000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f53616c65204d65746164617461206e6f7420666f72206f70657261746f720000604082015260600190565b6020808252602f908201527f53616c653a204f7264657220616c726561647920636c6f736564206f7220717560408201526e0c2dce8d2e8f240e8dede40d0d2ced608b1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526011908201527029b0b6329d102bb937b733903ab9b2b91760791b604082015260600190565b81516001600160a01b039081168252602080840151821690830152604080840151909116908201526060808301516101c0830191611d869084018261185d565b506080830151611d9960e084018261185d565b5060a083015161016083015260c083015161018083015260e0909201516101a09091015290565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201516001600160a01b03169181019190915260c00190565b825160ff168152602080840151818301526040938401518483015282516001600160a01b0316606080840191909152908301516080808401919091529383015160a083015282015160c082015291015160e08201526101000190565b9182526001600160a01b0316602082015260400190565b9788526001600160a01b03968716602089015294861660408801526060870193909352608086019190915290921660a084015260c083019190915260e08201526101000190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715611f0057634e487b7160e01b600052604160045260246000fd5b604052919050565b60008219821115611f1b57611f1b611f9b565b500190565b600060ff821660ff84168060ff03821115611f3d57611f3d611f9b565b019392505050565b600082611f6057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f7f57611f7f611f9b565b500290565b600082821015611f9657611f96611f9b565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461105957600080fdfea2646970667358221220955d20ae10262062e9a532bdb3c05ae89afba0d5f174a2109714a614736471ba64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80638ae42905116100a0578063e6c7bb8a11610064578063e6c7bb8a146102ba578063e9913135146102da578063f2fde38b14610307578063f4f7feca14610327578063f6419d961461035457610114565b80638ae42905146102185780638da5cb5b14610238578063a0cb68eb1461024d578063c0c53b8b1461026d578063d7f654891461028d57610114565b80632991e98d116100e75780632991e98d1461019957806338af3eed146101b95780636e667db3146101ce578063715018a6146101e35780637a490dae146101f857610114565b80630718a24f146101195780631bb5391e146101445780631c31f7101461015957806325feb6bc14610179575b600080fd5b34801561012557600080fd5b5061012e610374565b60405161013b91906118d8565b60405180910390f35b61015761015236600461178b565b610383565b005b34801561016557600080fd5b50610157610174366004611611565b61058d565b34801561018557600080fd5b5061012e610194366004611716565b610601565b3480156101a557600080fd5b506101576101b4366004611611565b6106a6565b3480156101c557600080fd5b5061012e61072d565b3480156101da57600080fd5b5061012e61073c565b3480156101ef57600080fd5b5061015761074b565b34801561020457600080fd5b5061015761021336600461175e565b6107d4565b34801561022457600080fd5b50610157610233366004611611565b61081e565b34801561024457600080fd5b5061012e610892565b34801561025957600080fd5b506101576102683660046116a4565b6108a1565b34801561027957600080fd5b5061015761028836600461162d565b610912565b34801561029957600080fd5b506102ad6102a8366004611742565b6109a5565b60405161013b91906119a6565b3480156102c657600080fd5b506102ad6102d5366004611831565b6109d6565b3480156102e657600080fd5b506102fa6102f53660046117f1565b610a09565b60405161013b9190611dc0565b34801561031357600080fd5b50610157610322366004611611565b610a49565b34801561033357600080fd5b506103476103423660046116fe565b610b0a565b60405161013b919061199b565b34801561036057600080fd5b506102ad61036f3660046116fe565b610b1f565b6099546001600160a01b031681565b600260675414156103af5760405162461bcd60e51b81526004016103a690611ce4565b60405180910390fd5b600260675584516001600160a01b031630146103dd5760405162461bcd60e51b81526004016103a6906119e2565b60408501516001600160a01b0316156104255784604001516001600160a01b0316336001600160a01b0316146104255760405162461bcd60e51b81526004016103a690611d1b565b600083118015610445575060a0850151158061044557508460a001518311155b6104615760405162461bcd60e51b81526004016103a690611bc5565b61046c848383610b31565b61047685856107d4565b60006104828685610c23565b90506000610491878686610cbe565b90508660600151604001518760600151602001516001600160a01b03168860c001517fc27fe7f59dae4fa236c251bd0c3eff967222f23417ad8ee7dd339e5f16fc1d1d888b602001518c60800151602001518d60800151604001518e6080015160600151338a600001518b60600151604051610514989796959493929190611e7b565b60405180910390a4811561057f578660600151604001518760600151602001516001600160a01b03167f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df498960c001518a60200151604051610576929190611e64565b60405180910390a35b505060016067555050505050565b610595610f11565b6001600160a01b03166105a6610892565b6001600160a01b0316146105cc5760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b0381166105df57600080fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b8051600090601b60ff821610156106205761061d601b82611f20565b90505b60018460405160200161063391906118a7565b6040516020818303038152906040528051906020012082856020015186604001516040516000815260200160405260405161067194939291906119af565b6020604051602081039080840390855afa158015610693573d6000803e3d6000fd5b5050604051601f19015195945050505050565b6106ae610f11565b6001600160a01b03166106bf610892565b6001600160a01b0316146106e55760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b03811661070b5760405162461bcd60e51b81526004016103a690611bf2565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031681565b6066546001600160a01b031681565b610753610f11565b6001600160a01b0316610764610892565b6001600160a01b03161461078a5760405162461bcd60e51b81526004016103a690611c29565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b81602001516001600160a01b03166107f46107ee846109a5565b83610601565b6001600160a01b03161461081a5760405162461bcd60e51b81526004016103a690611a57565b5050565b610826610f11565b6001600160a01b0316610837610892565b6001600160a01b03161461085d5760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b03811661087057600080fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031690565b60006108b08585853386610f15565b6000818152609b6020526040908190208590555190915084906001600160a01b038716907f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df49906109039086903390611e64565b60405180910390a35050505050565b600054610100900460ff168061092b575060005460ff16155b6109475760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff16158015610972576000805460ff1961ff0019909116610100171660011790555b61097c8484610f51565b610984610fe2565b61098d826106a6565b801561099f576000805461ff00191690555b50505050565b6000816040516020016109b89190611d46565b6040516020818303038152906040528051906020012090505b919050565b600082826040516020016109eb929190611e08565b60405160208183030381529060405280519060200120905092915050565b610a1161142d565b610a3f846080015160600151856060015160200151866060015160400151868660400151876020015161105c565b90505b9392505050565b610a51610f11565b6001600160a01b0316610a62610892565b6001600160a01b031614610a885760405162461bcd60e51b81526004016103a690611c29565b6001600160a01b038116610aae5760405162461bcd60e51b81526004016103a690611a11565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b609a6020526000908152604090205460ff1681565b609b6020526000908152604090205481565b60608201511580610b46575042826060015110155b610b625760405162461bcd60e51b81526004016103a690611b40565b81516001600160a01b03163314610b8b5760405162461bcd60e51b81526004016103a690611c5e565b6000610b9784846109d6565b6099549091506001600160a01b0316610bb08284610601565b6001600160a01b031614610bd65760405162461bcd60e51b81526004016103a690611afc565b6000818152609a602052604090205460ff1615610c055760405162461bcd60e51b81526004016103a690611a8e565b6000908152609a60205260409020805460ff19166001179055505050565b600080610c5384606001516020015185606001516040015186606001516060015187602001518860c00151610f15565b6000818152609b602052604081205491925090610c71908590611f08565b9050846060015160600151811115610c9b5760405162461bcd60e51b81526004016103a690611c95565b6000918252609b6020526040909120819055606080850151015114905092915050565b610cc661142d565b610cd1848484610a09565b905080604001513414610cf65760405162461bcd60e51b81526004016103a690611ac5565b604081015115610de457606081015115610d4a5760655460608201516040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610d48573d6000803e3d6000fd5b505b608081015115610d97578060a001516001600160a01b03166108fc82608001519081150290604051600060405180830381858888f19350505050158015610d95573d6000803e3d6000fd5b505b602081015115610de45783602001516001600160a01b03166108fc82602001519081150290604051600060405180830381858888f19350505050158015610de2573d6000803e3d6000fd5b505b60026060850151516003811115610e0b57634e487b7160e01b600052602160045260246000fd5b1415610e91576066546060850151602080820151908701516040928301519251634aef795160e11b81526001600160a01b03909416936395def2a293610e5a9392913391908a90600401611925565b600060405180830381600087803b158015610e7457600080fd5b505af1158015610e88573d6000803e3d6000fd5b50505050610a42565b606654606085015160208082015190870151604092830151925163488b0f7d60e01b81526001600160a01b039094169363488b0f7d93610ed89392913391906004016118ec565b600060405180830381600087803b158015610ef257600080fd5b505af1158015610f06573d6000803e3d6000fd5b505050509392505050565b3390565b60008585858585604051602001610f30959493929190611968565b60405160208183030381529060405280519060200120905095945050505050565b600054610100900460ff1680610f6a575060005460ff16155b610f865760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff16158015610fb1576000805460ff1961ff0019909116610100171660011790555b610fb961114f565b610fc28361058d565b610fcb8261081e565b8015610fdd576000805461ff00191690555b505050565b600054610100900460ff1680610ffb575060005460ff16155b6110175760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff16158015611042576000805460ff1961ff0019909116610100171660011790555b60016067558015611059576000805461ff00191690555b50565b61106461142d565b61106e8488611f65565b80825260009061271090611083908690611f65565b61108d9190611f45565b905060006127108484600001516110a49190611f65565b6110ae9190611f45565b83519091506110be908390611f08565b604084015282516110d0908290611f84565b60208401526110df8282611f08565b6060840152825160009081906110f8908b908b906111d3565b91509150600081118015611110575084602001518111155b15611141576001600160a01b03821660a086015260808501819052602085015161113b908290611f84565b60208601525b505050509695505050505050565b600054610100900460ff1680611168575060005460ff16155b6111845760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff161580156111af576000805460ff1961ff0019909116610100171660011790555b6111b76112ee565b6111bf611361565b8015611059576000805461ff001916905550565b6040516301ffc9a760e01b8152600090819085906001600160a01b038216906301ffc9a79061120d9063152a902d60e11b906004016119cd565b60206040518083038186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906116de565b156112e55760405163152a902d60e11b81526001600160a01b03821690632a55205a906112909088908890600401611ec2565b604080518083038186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df9190611677565b90935091505b50935093915050565b600054610100900460ff1680611307575060005460ff16155b6113235760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff161580156111bf576000805460ff1961ff0019909116610100171660011790558015611059576000805461ff001916905550565b600054610100900460ff168061137a575060005460ff16155b6113965760405162461bcd60e51b81526004016103a690611b77565b600054610100900460ff161580156113c1576000805460ff1961ff0019909116610100171660011790555b60006113cb610f11565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611059576000805461ff001916905550565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b80356109d181611fb1565b600060808284031215611488578081fd5b6114926080611ed0565b90508135600481106114a357600080fd5b815260208201356114b381611fb1565b80602083015250604082013560408201526060820135606082015292915050565b60006101c082840312156114e6578081fd5b6114f1610100611ed0565b90506114fc8261146c565b815261150a6020830161146c565b602082015261151b6040830161146c565b604082015261152d8360608401611477565b606082015261153f8360e08401611477565b608082015261016082013560a082015261018082013560c08201526101a082013560e082015292915050565b600060a0828403121561157c578081fd5b61158660a0611ed0565b9050813561159381611fb1565b808252506020820135602082015260408201356040820152606082013560608201526080820135608082015292915050565b6000606082840312156115d6578081fd5b6115e06060611ed0565b9050813560ff811681146115f357600080fd5b80825250602082013560208201526040820135604082015292915050565b600060208284031215611622578081fd5b8135610a4281611fb1565b600080600060608486031215611641578182fd5b833561164c81611fb1565b9250602084013561165c81611fb1565b9150604084013561166c81611fb1565b809150509250925092565b60008060408385031215611689578182fd5b825161169481611fb1565b6020939093015192949293505050565b600080600080608085870312156116b9578081fd5b84356116c481611fb1565b966020860135965060408601359560600135945092505050565b6000602082840312156116ef578081fd5b81518015158114610a42578182fd5b60006020828403121561170f578081fd5b5035919050565b60008060808385031215611728578182fd5b8235915061173984602085016115c5565b90509250929050565b60006101c08284031215611754578081fd5b610a4283836114d4565b6000806102208385031215611771578182fd5b61177b84846114d4565b9150611739846101c085016115c5565b600080600080600061034086880312156117a3578283fd5b6117ad87876114d4565b94506117bd876101c088016115c5565b935061022086013592506117d587610240880161156b565b91506117e5876102e088016115c5565b90509295509295909350565b60008060006102808486031215611806578081fd5b61181085856114d4565b92506101c08401359150611828856101e0860161156b565b90509250925092565b6000806101008385031215611844578182fd5b61184e84846115c5565b9150611739846060850161156b565b80516004811061187d57634e487b7160e01b600052602160045260246000fd5b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160e01b031991909116815260200190565b60208082526015908201527429b0b6329d102bb937b7339032bc31b430b733b29760591b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601f908201527f53616c653a20496e636f7272656374206f72646572207369676e617475726500604082015260600190565b6020808252601a908201527f53616c65204d6574616461746120616c72656164792075736564000000000000604082015260600190565b6020808252601d908201527f53616c653a2053656e742076616c756520697320696e636f7272656374000000604082015260600190565b60208082526024908201527f53616c653a20496e636f7272656374206f72646572206d657461207369676e616040820152637475726560e01b606082015260800190565b60208082526017908201527f53616c653a20427579204f726465722065787069726564000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526013908201527229b0b6329d102bb937b7339030b6b7bab73a1760691b604082015260600190565b6020808252601d908201527f45786368616e6765207369676e6572206d7573742062652076616c6964000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f53616c65204d65746164617461206e6f7420666f72206f70657261746f720000604082015260600190565b6020808252602f908201527f53616c653a204f7264657220616c726561647920636c6f736564206f7220717560408201526e0c2dce8d2e8f240e8dede40d0d2ced608b1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526011908201527029b0b6329d102bb937b733903ab9b2b91760791b604082015260600190565b81516001600160a01b039081168252602080840151821690830152604080840151909116908201526060808301516101c0830191611d869084018261185d565b506080830151611d9960e084018261185d565b5060a083015161016083015260c083015161018083015260e0909201516101a09091015290565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201516001600160a01b03169181019190915260c00190565b825160ff168152602080840151818301526040938401518483015282516001600160a01b0316606080840191909152908301516080808401919091529383015160a083015282015160c082015291015160e08201526101000190565b9182526001600160a01b0316602082015260400190565b9788526001600160a01b03968716602089015294861660408801526060870193909352608086019190915290921660a084015260c083019190915260e08201526101000190565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715611f0057634e487b7160e01b600052604160045260246000fd5b604052919050565b60008219821115611f1b57611f1b611f9b565b500190565b600060ff821660ff84168060ff03821115611f3d57611f3d611f9b565b019392505050565b600082611f6057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f7f57611f7f611f9b565b500290565b600082821015611f9657611f96611f9b565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461105957600080fdfea2646970667358221220955d20ae10262062e9a532bdb3c05ae89afba0d5f174a2109714a614736471ba64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "computeValues((address,address,address,(uint8,address,uint256,uint256),(uint8,address,uint256,uint256),uint256,uint256,uint256),uint256,(address,uint256,uint256,uint256,uint256))": {
        "details": "this function computes all the values that we need for the exchange. this can be called off-chain before buying so all values can be computed easily It will also help when we introduce tokens for payment"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverMessageSignature(bytes32,(uint8,bytes32,bytes32))": {
        "details": "verifies signature"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExchangeSigner(address)": {
        "details": "Allows owner to set the address used to sign the sales Metadata",
        "params": {
          "exchangeSigner_": "address of the signer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 136,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 139,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1873,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6943,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "beneficiary",
        "offset": 0,
        "slot": "101",
        "type": "t_address_payable"
      },
      {
        "astId": 6946,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "transferProxy",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ITransferProxy)5995"
      },
      {
        "astId": 303,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "_status",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 346,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7876,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "exchangeSigner",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 7880,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "usedSaleMeta",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7884,
        "contract": "contracts/Sales/Exchange.sol:Exchange",
        "label": "completed",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITransferProxy)5995": {
        "encoding": "inplace",
        "label": "contract ITransferProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}