{
  "address": "0x981AB47f1AcB2BD7E96d8D3304793DFF8f2B42Ac",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serviceFee",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        }
      ],
      "name": "CloseOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum WallkandaSaleStorage.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.OrderData",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.Signature",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "_validateOrderSig",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum WallkandaSaleStorage.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.OrderData",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.Signature",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "completed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum WallkandaSaleStorage.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.OrderData",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "computeValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerEndValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTransaction",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "serviceFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "royaltiesRecipient",
              "type": "address"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.OrderTransfers",
          "name": "orderTransfers",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_buyerServiceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sellerServiceFee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum WallkandaSaleStorage.TokenType",
              "name": "tokenType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "exchange",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPerBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderNonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.OrderData",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "prepareOrderMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct WallkandaSaleStorage.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "recoverMessageSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellerServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_buyerServiceFee",
          "type": "uint256"
        }
      ],
      "name": "setBuyerServiceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sellerServiceFee",
          "type": "uint256"
        }
      ],
      "name": "setSellerServiceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferProxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxy",
      "outputs": [
        {
          "internalType": "contract ITransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x34c1b4bd9872b65aafc07353d457826b9a71b19fdd93f26b17dc6f5ba317a037",
  "receipt": {
    "to": null,
    "from": "0xd9a5Da84b0866DcA49e20B753f5dC4d64B291481",
    "contractAddress": "0x981AB47f1AcB2BD7E96d8D3304793DFF8f2B42Ac",
    "transactionIndex": 0,
    "gasUsed": "1638770",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe9fa99b6e2eac80941d9679d62a13d375f69227eccb7810aeea3dd146f4e2948",
    "transactionHash": "0x34c1b4bd9872b65aafc07353d457826b9a71b19fdd93f26b17dc6f5ba317a037",
    "logs": [],
    "blockNumber": 8706845,
    "cumulativeGasUsed": "1638770",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9c379f682c82fe4aa77e887111001cf5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"CloseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum WallkandaSaleStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct WallkandaSaleStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WallkandaSaleStorage.Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"_validateOrderSig\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum WallkandaSaleStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct WallkandaSaleStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WallkandaSaleStorage.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum WallkandaSaleStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct WallkandaSaleStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"computeValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerEndValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTransaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"}],\"internalType\":\"struct WallkandaSaleStorage.OrderTransfers\",\"name\":\"orderTransfers\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyerServiceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellerServiceFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum WallkandaSaleStorage.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct WallkandaSaleStorage.OrderData\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareOrderMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct WallkandaSaleStorage.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"recoverMessageSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyerServiceFee\",\"type\":\"uint256\"}],\"name\":\"setBuyerServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellerServiceFee\",\"type\":\"uint256\"}],\"name\":\"setSellerServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferProxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract ITransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeValues((uint8,address,address,address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)\":{\"details\":\"this function computes all the values that we need for the exchange. this can be called off-chain before buying so all values can be computed easily It will also help when we introduce tokens for payment\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverMessageSignature(bytes32,(uint8,bytes32,bytes32))\":{\"details\":\"verifies signature\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sales/WallkandaSale.sol\":\"WallkandaSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/Proxys/Transfer/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferProxy {\\n    function erc721SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function erc1155SafeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae5dd051ab1109cfc458dba0bd390410275ac1ae85510387347771f32fcbfa3b\",\"license\":\"MIT\"},\"contracts/Sales/WallkandaSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\nimport '../Tokens/ERC2981/IERC2981Royalties.sol';\\nimport './WallkandaSaleStorage.sol';\\n\\ncontract WallkandaSale is OwnableUpgradeable, ReentrancyGuardUpgradeable, WallkandaSaleStorage {\\n    function initialize(\\n        address payable _beneficiary,\\n        address _transferProxy,\\n        uint256 _buyerServiceFee,\\n        uint256 _sellerServiceFee\\n    ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        setBeneficiary(_beneficiary);\\n        setTransferProxy(_transferProxy);\\n        setBuyerServiceFee(_buyerServiceFee);\\n        setSellerServiceFee(_sellerServiceFee);\\n    }\\n\\n    function setBuyerServiceFee(uint256 _buyerServiceFee) public onlyOwner {\\n        buyerServiceFee = _buyerServiceFee;\\n    }\\n\\n    function setSellerServiceFee(uint256 _sellerServiceFee) public onlyOwner {\\n        sellerServiceFee = _sellerServiceFee;\\n    }\\n\\n    function setTransferProxy(address _transferProxy) public onlyOwner {\\n        require(_transferProxy != address(0));\\n        transferProxy = ITransferProxy(_transferProxy);\\n    }\\n\\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\\n        require(_beneficiary != address(0));\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function prepareOrderMessage(OrderData memory order)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(order));\\n    }\\n\\n    /**\\n     * @dev verifies signature\\n     */\\n    function recoverMessageSignature(\\n        bytes32 message,\\n        Signature calldata signature\\n    ) public pure returns (address) {\\n        uint8 v = signature.v;\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        return\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        '\\\\x19Ethereum Signed Message:\\\\n32',\\n                        message\\n                    )\\n                ),\\n                v,\\n                signature.r,\\n                signature.s\\n            );\\n    }\\n\\n    /**\\n     * @dev this function computes all the values that we need for the exchange.\\n     * this can be called off-chain before buying so all values can be computed easily\\n     *\\n     * It will also help when we introduce tokens for payment\\n     */\\n    function computeValues(OrderData memory order, uint256 amount) public view returns (OrderTransfers memory orderTransfers) {\\n        orderTransfers.total = order.unitPrice * amount;\\n        uint256 buyerFee = orderTransfers.total * buyerServiceFee / 10000;\\n        uint256 sellerFee = orderTransfers.total * sellerServiceFee / 10000;\\n\\n        // total of transaction value (price + buyerFee)\\n        orderTransfers.totalTransaction = orderTransfers.total + buyerFee;\\n        // seller end value: price - sellerFee\\n        orderTransfers.sellerEndValue = orderTransfers.total - sellerFee;\\n        // all fees\\n        orderTransfers.serviceFees = sellerFee + buyerFee;\\n\\n        (address royaltiesRecipient, uint256 royaltiesAmount) = _getRoyalties(order.token, order.tokenId, orderTransfers.total);\\n\\n        // if there are royalties\\n        if (royaltiesAmount > 0 && royaltiesAmount <= orderTransfers.sellerEndValue) {\\n            orderTransfers.royaltiesRecipient = royaltiesRecipient;\\n            orderTransfers.royaltiesAmount = royaltiesAmount;\\n            // substract royalties to end value\\n            orderTransfers.sellerEndValue = orderTransfers.sellerEndValue - royaltiesAmount;\\n        }\\n    }\\n\\n    function buy(\\n        OrderData memory order,\\n        Signature calldata sig,\\n        uint256 amount // quantity to buy\\n    ) external payable nonReentrant {\\n        // verify that order is for this contract\\n        require(\\n            order.exchange == address(this),\\n            'Sale: Order not for this contract'\\n        );\\n\\n        // verify if this order is for a specific address\\n        if (order.taker != address(0)) {\\n            require(msg.sender == order.taker, 'Sale: Order not for this user');\\n        }\\n\\n        require(amount > 0, 'Sale: amount must be > 0');\\n\\n        require(\\n            order.maxPerBuy == 0 || amount <= order.maxPerBuy,\\n            'Sale: Amount too big'\\n        );\\n\\n        // verify order signature\\n        _validateOrderSig(order, sig);\\n\\n        // update order state\\n        bool closed = _verifyOpenAndModifyState(order, amount);\\n\\n        // transfer everything\\n        OrderTransfers memory orderTransfers = _doTransfers(order, amount);\\n\\n        // emit buy\\n        emit Buy(\\n            order.orderNonce,\\n            order.token,\\n            order.tokenId,\\n            amount,\\n            order.maker,\\n            msg.sender,\\n            orderTransfers.total,\\n            orderTransfers.serviceFees\\n        );\\n\\n        // if order is closed, emit close.\\n        if (closed) {\\n            emit CloseOrder(\\n                order.orderNonce,\\n                order.token,\\n                order.tokenId,\\n                order.maker\\n            );\\n        }\\n    }\\n\\n    function cancelOrder(\\n        address token,\\n        uint256 tokenId,\\n        uint256 orderNonce,\\n        uint256 quantity\\n    ) public {\\n        bytes32 orderId =\\n            _getOrderId(token, tokenId, quantity, msg.sender, orderNonce);\\n        completed[orderId] = quantity;\\n        emit CloseOrder(orderNonce, token, tokenId, msg.sender);\\n    }\\n\\n    function _validateOrderSig(OrderData memory order, Signature calldata sig)\\n        public\\n        pure\\n    {\\n        require(\\n            recoverMessageSignature(prepareOrderMessage(order), sig) ==\\n                order.maker,\\n            'Sale: Incorrect order signature'\\n        );\\n    }\\n\\n    // returns orderId for completion\\n    function _getOrderId(\\n        address token,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address maker,\\n        uint256 orderNonce\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(abi.encode(token, tokenId, quantity, maker, orderNonce));\\n    }\\n\\n    function _verifyOpenAndModifyState(\\n        OrderData memory order,\\n        uint256 buyingAmount\\n    ) internal returns (bool) {\\n        bytes32 orderId =\\n            _getOrderId(\\n                order.token,\\n                order.tokenId,\\n                order.quantity,\\n                order.maker,\\n                order.orderNonce\\n            );\\n        uint256 comp = completed[orderId] + buyingAmount;\\n\\n        // makes sure order is not already closed\\n        require(\\n            comp <= order.quantity,\\n            'Sale: Order already closed or quantity too high'\\n        );\\n\\n        // update order completion amount\\n        completed[orderId] = comp;\\n\\n        // returns if order is closed or not\\n        return comp == order.quantity;\\n    }\\n\\n    function _doTransfers(OrderData memory order, uint256 amount) internal returns (OrderTransfers memory orderTransfers) {\\n        // get all values into a struct\\n        // it will help later when we introduce token payments\\n        orderTransfers = computeValues(order, amount);\\n\\n        // this here is because we're not using tokens\\n        // verify that msg.value is right\\n        require(\\n            msg.value == orderTransfers.totalTransaction, // total = (unitPrice * amount) + buyerFee\\n            'Sale: Sent value is incorrect'\\n        );\\n\\n        // transfer ethereum\\n        if (orderTransfers.total > 0) {\\n            // send service fees (buyerFee + sellerFees) to beneficiary\\n            if (orderTransfers.serviceFees > 0) {\\n                beneficiary.transfer(orderTransfers.serviceFees);\\n            }\\n\\n            if ( orderTransfers.royaltiesAmount > 0) {\\n                payable(orderTransfers.royaltiesRecipient).transfer(orderTransfers.royaltiesAmount);\\n            }\\n\\n            // send what is left to seller\\n            if (orderTransfers.sellerEndValue > 0) {\\n                payable(order.maker).transfer(orderTransfers.sellerEndValue);\\n            }\\n        }\\n\\n        // send token to buyer\\n        if (order.tokenType == TokenType.ERC1155) {\\n            transferProxy.erc1155SafeTransferFrom(\\n                order.token,\\n                order.maker,\\n                msg.sender,\\n                order.tokenId,\\n                amount,\\n                ''\\n            );\\n        } else {\\n            transferProxy.erc721SafeTransferFrom(\\n                order.token,\\n                order.maker,\\n                msg.sender,\\n                order.tokenId,\\n                ''\\n            );\\n        }\\n    }\\n\\n    function _getRoyalties(address token, uint256 tokenId, uint256 saleValue) private view returns (address royaltiesRecipient, uint256 royaltiesAmount) {\\n        IERC2981Royalties withRoyalties = IERC2981Royalties(token);\\n        if (withRoyalties.supportsInterface(type(IERC2981Royalties).interfaceId)) {\\n            (royaltiesRecipient, royaltiesAmount, ) = withRoyalties.royaltyInfo(\\n                tokenId,\\n                saleValue,\\n                ''\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06174d9a2d30f78d8e6a658e05a792b64a08cf0dc4c09a8f385c760180622555\",\"license\":\"MIT\"},\"contracts/Sales/WallkandaSaleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '../Proxys/Transfer/ITransferProxy.sol';\\nimport '../Tokens/ERC2981/IERC2981Royalties.sol';\\n\\ncontract WallkandaSaleStorage {\\n\\n    event Buy(\\n        uint256 indexed orderNonce,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        uint256 amount,\\n        address maker,\\n        address buyer,\\n        uint256 value,\\n        uint256 serviceFee\\n    );\\n\\n    event CloseOrder(\\n        uint256 orderNonce,\\n        address indexed token,\\n        uint256 indexed tokenId,\\n        address maker\\n    );\\n\\n    enum TokenType {ERC1155, ERC721}\\n\\n    uint256 public sellerServiceFee;\\n    uint256 public buyerServiceFee;\\n\\n    address payable public beneficiary;\\n    ITransferProxy public transferProxy;\\n\\n    // orderId => completed amount\\n    mapping(bytes32 => uint256) public completed;\\n\\n    /* An ECDSA signature. */\\n    struct Signature {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n\\n    struct OrderData {\\n        /* token type, erc721 or erc1155 */\\n        TokenType tokenType;\\n        /* Exchange address - should be current contract */\\n        address exchange;\\n        /* maker of the order */\\n        address maker;\\n        /* taker of the order */\\n        address taker;\\n        /* Token contract  */\\n        address token;\\n        /* TokenId */\\n        uint256 tokenId;\\n        /* Quantity for this order */\\n        uint256 quantity;\\n        /* Max items by each buy. Allow to create one big order, but to limit how many can be bought at once */\\n        uint256 maxPerBuy;\\n        /* OrderNonce so we can have different order for the same tokenId */\\n        uint256 orderNonce;\\n        /* Buy token */\\n        address buyToken; /* address(0) for current chain native token */\\n        /* Unit price */\\n        uint256 unitPrice;\\n    }\\n\\n    struct OrderTransfers {\\n        /* total order value */\\n        uint256 total;\\n        /* total value for seller (total - sellerServiceFees - royalties) */\\n        uint256 sellerEndValue;\\n        /* total transaction */\\n        uint256 totalTransaction;\\n        /* all service fees */\\n        uint256 serviceFees;\\n        /* royalties amount to transfer */\\n        uint256 royaltiesAmount;\\n        /* royalties recipient */\\n        address royaltiesRecipient;\\n    }\\n}\\n\",\"keccak256\":\"0xe2c657ea2595ebaa5bf465707a63f8266bb465753e2553f59980ed5328cf84db\",\"license\":\"MIT\"},\"contracts/Tokens/ERC2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\n/**\\n * Early implementation of EIP-2981 as of comment\\n * https://github.com/ethereum/EIPs/issues/2907#issuecomment-831352868\\n *\\n * Interface ID:\\n *\\n * bytes4(keccak256('royaltyInfo(uint256,uint256,bytes)')) == 0xc155531d\\n *\\n * =>  0xc155531d\\n */\\ninterface IERC2981Royalties is IERC165Upgradeable {\\n    /**\\n     * @dev Returns an NFTs royalty payment information\\n     *\\n     * @param tokenId  The identifier for an NFT\\n     * @param value Purchase price of NFT\\n     * @param data Additional data for royalty info. Not to be used as part of EIP-2981.\\n     *\\n     * @return receiver The royalty recipient address\\n     * @return royaltyAmount Amount to be paid to the royalty recipient\\n     * @return royaltyPaymentData Additional data for royalty info. Not to be used as part of EIP-2981.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        view\\n        returns (\\n            address receiver,\\n            uint256 royaltyAmount,\\n            bytes memory royaltyPaymentData\\n        );\\n}\\n\",\"keccak256\":\"0x4621102e7f1dc16322a31e31ecbefbeb81dce33c0211a9131ac8328df9980aa0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611cb0806100206000396000f3fe6080604052600436106101145760003560e01c80638ae42905116100a0578063a9d7999f11610064578063a9d7999f146102af578063c68e8bfb146102cf578063eb990c59146102fc578063f2fde38b1461031c578063f6419d961461033c57610114565b80638ae42905146102255780638b0b10a2146102455780638da5cb5b146102655780639c66809d1461027a578063a0cb68eb1461028f57610114565b80633f5b8250116100e75780633f5b8250146101a6578063525ea6b5146101b957806360085da6146101d95780636e667db3146101fb578063715018a61461021057610114565b80631c31f710146101195780632350648b1461013b57806325feb6bc1461015b57806338af3eed14610191575b600080fd5b34801561012557600080fd5b50610139610134366004611381565b61035c565b005b34801561014757600080fd5b50610139610156366004611510565b6103d9565b34801561016757600080fd5b5061017b610176366004611528565b61041d565b604051610188919061168a565b60405180910390f35b34801561019d57600080fd5b5061017b6104c9565b6101396101b436600461159d565b6104d8565b3480156101c557600080fd5b506101396101d4366004611570565b6106b7565b3480156101e557600080fd5b506101ee610701565b604051610188919061174d565b34801561020757600080fd5b5061017b610707565b34801561021c57600080fd5b50610139610716565b34801561023157600080fd5b50610139610240366004611381565b61079f565b34801561025157600080fd5b506101ee610260366004611554565b610813565b34801561027157600080fd5b5061017b610844565b34801561028657600080fd5b506101ee610853565b34801561029b57600080fd5b506101396102aa3660046114b6565b610859565b3480156102bb57600080fd5b506101396102ca366004611510565b6108ca565b3480156102db57600080fd5b506102ef6102ea3660046115dd565b61090e565b6040516101889190611ad1565b34801561030857600080fd5b506101396103173660046113a4565b610a0d565b34801561032857600080fd5b50610139610337366004611381565b610aba565b34801561034857600080fd5b506101ee610357366004611510565b610b7b565b610364610b8d565b6001600160a01b0316610375610844565b6001600160a01b0316146103a45760405162461bcd60e51b815260040161039b9061193a565b60405180910390fd5b6001600160a01b0381166103b757600080fd5b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6103e1610b8d565b6001600160a01b03166103f2610844565b6001600160a01b0316146104185760405162461bcd60e51b815260040161039b9061193a565b609855565b60008061042d6020840184611609565b9050601b8160ff16101561044957610446601b82611bbe565b90505b60018460405160200161045c9190611659565b60408051601f1981840301815282825280516020918201206000845292810180835261049393928692890135919089013590611756565b6020604051602081039080840390855afa1580156104b5573d6000803e3d6000fd5b505050602060405103519150505b92915050565b6099546001600160a01b031681565b600260655414156104fb5760405162461bcd60e51b815260040161039b906119be565b600260655560208301516001600160a01b0316301461052c5760405162461bcd60e51b815260040161039b906117cf565b60608301516001600160a01b0316156105745782606001516001600160a01b0316336001600160a01b0316146105745760405162461bcd60e51b815260040161039b90611847565b600081116105945760405162461bcd60e51b815260040161039b90611903565b60e083015115806105a957508260e001518111155b6105c55760405162461bcd60e51b815260040161039b906119f5565b6105cf83836106b7565b60006105db8483610b91565b905060006105e98584610c1a565b90508460a0015185608001516001600160a01b03168661010001517f24dfc6da17e625aef88e98e7eb030f8bc7a234ba64b27076f05d62b5245fb4618689604001513387600001518860600151604051610647959493929190611b30565b60405180910390a481156106ab578460a0015185608001516001600160a01b03167f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df4987610100015188604001516040516106a2929190611b19565b60405180910390a35b50506001606555505050565b81604001516001600160a01b03166106d76106d184610813565b8361041d565b6001600160a01b0316146106fd5760405162461bcd60e51b815260040161039b90611810565b5050565b60975481565b609a546001600160a01b031681565b61071e610b8d565b6001600160a01b031661072f610844565b6001600160a01b0316146107555760405162461bcd60e51b815260040161039b9061193a565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6107a7610b8d565b6001600160a01b03166107b8610844565b6001600160a01b0316146107de5760405162461bcd60e51b815260040161039b9061193a565b6001600160a01b0381166107f157600080fd5b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000816040516020016108269190611a23565b6040516020818303038152906040528051906020012090505b919050565b6033546001600160a01b031690565b60985481565b60006108688585843387610e52565b6000818152609b6020526040908190208490555190915084906001600160a01b038716907f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df49906108bb9087903390611b19565b60405180910390a35050505050565b6108d2610b8d565b6001600160a01b03166108e3610844565b6001600160a01b0316146109095760405162461bcd60e51b815260040161039b9061193a565b609755565b610916611254565b818361014001516109279190611c03565b8082526098546000916127109161093d91611c03565b6109479190611be3565b9050600061271060975484600001516109609190611c03565b61096a9190611be3565b835190915061097a908390611ba6565b6040840152825161098c908290611c22565b602084015261099b8282611ba6565b6060840152608085015160a0860151845160009283926109ba92610e8e565b915091506000811180156109d2575084602001518111155b15610a03576001600160a01b03821660a08601526080850181905260208501516109fd908290611c22565b60208601525b5050505092915050565b600054610100900460ff1680610a26575060005460ff16155b610a425760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff16158015610a6d576000805460ff1961ff0019909116610100171660011790555b610a75610faf565b610a7d611034565b610a868561035c565b610a8f8461079f565b610a98836103d9565b610aa1826108ca565b8015610ab3576000805461ff00191690555b5050505050565b610ac2610b8d565b6001600160a01b0316610ad3610844565b6001600160a01b031614610af95760405162461bcd60e51b815260040161039b9061193a565b6001600160a01b038116610b1f5760405162461bcd60e51b815260040161039b90611789565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b609b6020526000908152604090205481565b3390565b600080610bb684608001518560a001518660c001518760400151886101000151610e52565b6000818152609b602052604081205491925090610bd4908590611ba6565b90508460c00151811115610bfa5760405162461bcd60e51b815260040161039b9061196f565b6000918252609b602052604090912081905560c084015114905092915050565b610c22611254565b610c2c838361090e565b905080604001513414610c515760405162461bcd60e51b815260040161039b9061187e565b805115610d3c57606081015115610ca25760995460608201516040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610ca0573d6000803e3d6000fd5b505b608081015115610cef578060a001516001600160a01b03166108fc82608001519081150290604051600060405180830381858888f19350505050158015610ced573d6000803e3d6000fd5b505b602081015115610d3c5782604001516001600160a01b03166108fc82602001519081150290604051600060405180830381858888f19350505050158015610d3a573d6000803e3d6000fd5b505b600083516001811115610d5f57634e487b7160e01b600052602160045260246000fd5b1415610de157609a54608084015160408086015160a08701519151634aef795160e11b81526001600160a01b03909416936395def2a293610daa9390929133919089906004016116d7565b600060405180830381600087803b158015610dc457600080fd5b505af1158015610dd8573d6000803e3d6000fd5b505050506104c3565b609a54608084015160408086015160a0870151915163488b0f7d60e01b81526001600160a01b039094169363488b0f7d93610e249390929133919060040161169e565b600060405180830381600087803b158015610e3e57600080fd5b505af1158015610a03573d6000803e3d6000fd5b60008585858585604051602001610e6d95949392919061171a565b60405160208183030381529060405280519060200120905095945050505050565b6040516301ffc9a760e01b8152600090819085906001600160a01b038216906301ffc9a790610ec89063c155531d60e01b90600401611774565b60206040518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1891906114f0565b15610fa65760405163c155531d60e01b81526001600160a01b0382169063c155531d90610f4b9088908890600401611b5f565b60006040518083038186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9f91908101906113e9565b5090935091505b50935093915050565b600054610100900460ff1680610fc8575060005460ff16155b610fe45760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561100f576000805460ff1961ff0019909116610100171660011790555b61101761109c565b61101f61110f565b8015611031576000805461ff00191690555b50565b600054610100900460ff168061104d575060005460ff16155b6110695760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff16158015611094576000805460ff1961ff0019909116610100171660011790555b61101f6111db565b600054610100900460ff16806110b5575060005460ff16155b6110d15760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561101f576000805460ff1961ff0019909116610100171660011790558015611031576000805461ff001916905550565b600054610100900460ff1680611128575060005460ff16155b6111445760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561116f576000805460ff1961ff0019909116610100171660011790555b6000611179610b8d565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611031576000805461ff001916905550565b600054610100900460ff16806111f4575060005460ff16155b6112105760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561123b576000805460ff1961ff0019909116610100171660011790555b60016065558015611031576000805461ff001916905550565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b803561083f81611c65565b80356002811061083f57600080fd5b60006101608083850312156112c0578182fd5b6112c981611b7c565b9150506112d58261129e565b81526112e360208301611293565b60208201526112f460408301611293565b604082015261130560608301611293565b606082015261131660808301611293565b608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120611353818401611293565b818301525061014080830135818301525092915050565b60006060828403121561137b578081fd5b50919050565b600060208284031215611392578081fd5b813561139d81611c65565b9392505050565b600080600080608085870312156113b9578283fd5b84356113c481611c65565b935060208501356113d481611c65565b93969395505050506040820135916060013590565b6000806000606084860312156113fd578283fd5b835161140881611c65565b809350506020808501519250604085015167ffffffffffffffff8082111561142e578384fd5b818701915087601f830112611441578384fd5b81518181111561145357611453611c4f565b611465601f8201601f19168501611b7c565b9150808252888482850101111561147a578485fd5b845b8181101561149757838101850151838201860152840161147c565b818111156114a757858583850101525b50508093505050509250925092565b600080600080608085870312156114cb578384fd5b84356114d681611c65565b966020860135965060408601359560600135945092505050565b600060208284031215611501578081fd5b8151801515811461139d578182fd5b600060208284031215611521578081fd5b5035919050565b6000806080838503121561153a578182fd5b8235915061154b846020850161136a565b90509250929050565b60006101608284031215611566578081fd5b61139d83836112ad565b6000806101c08385031215611583578182fd5b61158d84846112ad565b915061154b84610160850161136a565b60008060006101e084860312156115b2578081fd5b6115bc85856112ad565b92506115cc85610160860161136a565b91506101c084013590509250925092565b60008061018083850312156115f0578182fd5b6115fa84846112ad565b94610160939093013593505050565b60006020828403121561161a578081fd5b813560ff8116811461139d578182fd5b6001600160a01b03169052565b6002811061165557634e487b7160e01b600052602160045260246000fd5b9052565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160e01b031991909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526021908201527f53616c653a204f72646572206e6f7420666f72207468697320636f6e747261636040820152601d60fa1b606082015260800190565b6020808252601f908201527f53616c653a20496e636f7272656374206f72646572207369676e617475726500604082015260600190565b6020808252601d908201527f53616c653a204f72646572206e6f7420666f7220746869732075736572000000604082015260600190565b6020808252601d908201527f53616c653a2053656e742076616c756520697320696e636f7272656374000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526018908201527f53616c653a20616d6f756e74206d757374206265203e20300000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f53616c653a204f7264657220616c726561647920636c6f736564206f7220717560408201526e0c2dce8d2e8f240e8dede40d0d2ced608b1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526014908201527353616c653a20416d6f756e7420746f6f2062696760601b604082015260600190565b600061016082019050611a37828451611637565b6020830151611a49602084018261162a565b506040830151611a5c604084018261162a565b506060830151611a6f606084018261162a565b506080830151611a82608084018261162a565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611ac08285018261162a565b505061014092830151919092015290565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201516001600160a01b03169181019190915260c00190565b9182526001600160a01b0316602082015260400190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b918252602082015260606040820181905260009082015260800190565b60405181810167ffffffffffffffff81118282101715611b9e57611b9e611c4f565b604052919050565b60008219821115611bb957611bb9611c39565b500190565b600060ff821660ff84168060ff03821115611bdb57611bdb611c39565b019392505050565b600082611bfe57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611c1d57611c1d611c39565b500290565b600082821015611c3457611c34611c39565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461103157600080fdfea2646970667358221220f1ee5e47211199487c45b9e4d217d05a96a3b741116792bcf58af02eccb62aba64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80638ae42905116100a0578063a9d7999f11610064578063a9d7999f146102af578063c68e8bfb146102cf578063eb990c59146102fc578063f2fde38b1461031c578063f6419d961461033c57610114565b80638ae42905146102255780638b0b10a2146102455780638da5cb5b146102655780639c66809d1461027a578063a0cb68eb1461028f57610114565b80633f5b8250116100e75780633f5b8250146101a6578063525ea6b5146101b957806360085da6146101d95780636e667db3146101fb578063715018a61461021057610114565b80631c31f710146101195780632350648b1461013b57806325feb6bc1461015b57806338af3eed14610191575b600080fd5b34801561012557600080fd5b50610139610134366004611381565b61035c565b005b34801561014757600080fd5b50610139610156366004611510565b6103d9565b34801561016757600080fd5b5061017b610176366004611528565b61041d565b604051610188919061168a565b60405180910390f35b34801561019d57600080fd5b5061017b6104c9565b6101396101b436600461159d565b6104d8565b3480156101c557600080fd5b506101396101d4366004611570565b6106b7565b3480156101e557600080fd5b506101ee610701565b604051610188919061174d565b34801561020757600080fd5b5061017b610707565b34801561021c57600080fd5b50610139610716565b34801561023157600080fd5b50610139610240366004611381565b61079f565b34801561025157600080fd5b506101ee610260366004611554565b610813565b34801561027157600080fd5b5061017b610844565b34801561028657600080fd5b506101ee610853565b34801561029b57600080fd5b506101396102aa3660046114b6565b610859565b3480156102bb57600080fd5b506101396102ca366004611510565b6108ca565b3480156102db57600080fd5b506102ef6102ea3660046115dd565b61090e565b6040516101889190611ad1565b34801561030857600080fd5b506101396103173660046113a4565b610a0d565b34801561032857600080fd5b50610139610337366004611381565b610aba565b34801561034857600080fd5b506101ee610357366004611510565b610b7b565b610364610b8d565b6001600160a01b0316610375610844565b6001600160a01b0316146103a45760405162461bcd60e51b815260040161039b9061193a565b60405180910390fd5b6001600160a01b0381166103b757600080fd5b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6103e1610b8d565b6001600160a01b03166103f2610844565b6001600160a01b0316146104185760405162461bcd60e51b815260040161039b9061193a565b609855565b60008061042d6020840184611609565b9050601b8160ff16101561044957610446601b82611bbe565b90505b60018460405160200161045c9190611659565b60408051601f1981840301815282825280516020918201206000845292810180835261049393928692890135919089013590611756565b6020604051602081039080840390855afa1580156104b5573d6000803e3d6000fd5b505050602060405103519150505b92915050565b6099546001600160a01b031681565b600260655414156104fb5760405162461bcd60e51b815260040161039b906119be565b600260655560208301516001600160a01b0316301461052c5760405162461bcd60e51b815260040161039b906117cf565b60608301516001600160a01b0316156105745782606001516001600160a01b0316336001600160a01b0316146105745760405162461bcd60e51b815260040161039b90611847565b600081116105945760405162461bcd60e51b815260040161039b90611903565b60e083015115806105a957508260e001518111155b6105c55760405162461bcd60e51b815260040161039b906119f5565b6105cf83836106b7565b60006105db8483610b91565b905060006105e98584610c1a565b90508460a0015185608001516001600160a01b03168661010001517f24dfc6da17e625aef88e98e7eb030f8bc7a234ba64b27076f05d62b5245fb4618689604001513387600001518860600151604051610647959493929190611b30565b60405180910390a481156106ab578460a0015185608001516001600160a01b03167f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df4987610100015188604001516040516106a2929190611b19565b60405180910390a35b50506001606555505050565b81604001516001600160a01b03166106d76106d184610813565b8361041d565b6001600160a01b0316146106fd5760405162461bcd60e51b815260040161039b90611810565b5050565b60975481565b609a546001600160a01b031681565b61071e610b8d565b6001600160a01b031661072f610844565b6001600160a01b0316146107555760405162461bcd60e51b815260040161039b9061193a565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6107a7610b8d565b6001600160a01b03166107b8610844565b6001600160a01b0316146107de5760405162461bcd60e51b815260040161039b9061193a565b6001600160a01b0381166107f157600080fd5b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000816040516020016108269190611a23565b6040516020818303038152906040528051906020012090505b919050565b6033546001600160a01b031690565b60985481565b60006108688585843387610e52565b6000818152609b6020526040908190208490555190915084906001600160a01b038716907f68c1771f207c0e6b02043d9afed3bae85d8a473721b0f42a8d8d5eea8250df49906108bb9087903390611b19565b60405180910390a35050505050565b6108d2610b8d565b6001600160a01b03166108e3610844565b6001600160a01b0316146109095760405162461bcd60e51b815260040161039b9061193a565b609755565b610916611254565b818361014001516109279190611c03565b8082526098546000916127109161093d91611c03565b6109479190611be3565b9050600061271060975484600001516109609190611c03565b61096a9190611be3565b835190915061097a908390611ba6565b6040840152825161098c908290611c22565b602084015261099b8282611ba6565b6060840152608085015160a0860151845160009283926109ba92610e8e565b915091506000811180156109d2575084602001518111155b15610a03576001600160a01b03821660a08601526080850181905260208501516109fd908290611c22565b60208601525b5050505092915050565b600054610100900460ff1680610a26575060005460ff16155b610a425760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff16158015610a6d576000805460ff1961ff0019909116610100171660011790555b610a75610faf565b610a7d611034565b610a868561035c565b610a8f8461079f565b610a98836103d9565b610aa1826108ca565b8015610ab3576000805461ff00191690555b5050505050565b610ac2610b8d565b6001600160a01b0316610ad3610844565b6001600160a01b031614610af95760405162461bcd60e51b815260040161039b9061193a565b6001600160a01b038116610b1f5760405162461bcd60e51b815260040161039b90611789565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b609b6020526000908152604090205481565b3390565b600080610bb684608001518560a001518660c001518760400151886101000151610e52565b6000818152609b602052604081205491925090610bd4908590611ba6565b90508460c00151811115610bfa5760405162461bcd60e51b815260040161039b9061196f565b6000918252609b602052604090912081905560c084015114905092915050565b610c22611254565b610c2c838361090e565b905080604001513414610c515760405162461bcd60e51b815260040161039b9061187e565b805115610d3c57606081015115610ca25760995460608201516040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610ca0573d6000803e3d6000fd5b505b608081015115610cef578060a001516001600160a01b03166108fc82608001519081150290604051600060405180830381858888f19350505050158015610ced573d6000803e3d6000fd5b505b602081015115610d3c5782604001516001600160a01b03166108fc82602001519081150290604051600060405180830381858888f19350505050158015610d3a573d6000803e3d6000fd5b505b600083516001811115610d5f57634e487b7160e01b600052602160045260246000fd5b1415610de157609a54608084015160408086015160a08701519151634aef795160e11b81526001600160a01b03909416936395def2a293610daa9390929133919089906004016116d7565b600060405180830381600087803b158015610dc457600080fd5b505af1158015610dd8573d6000803e3d6000fd5b505050506104c3565b609a54608084015160408086015160a0870151915163488b0f7d60e01b81526001600160a01b039094169363488b0f7d93610e249390929133919060040161169e565b600060405180830381600087803b158015610e3e57600080fd5b505af1158015610a03573d6000803e3d6000fd5b60008585858585604051602001610e6d95949392919061171a565b60405160208183030381529060405280519060200120905095945050505050565b6040516301ffc9a760e01b8152600090819085906001600160a01b038216906301ffc9a790610ec89063c155531d60e01b90600401611774565b60206040518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1891906114f0565b15610fa65760405163c155531d60e01b81526001600160a01b0382169063c155531d90610f4b9088908890600401611b5f565b60006040518083038186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9f91908101906113e9565b5090935091505b50935093915050565b600054610100900460ff1680610fc8575060005460ff16155b610fe45760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561100f576000805460ff1961ff0019909116610100171660011790555b61101761109c565b61101f61110f565b8015611031576000805461ff00191690555b50565b600054610100900460ff168061104d575060005460ff16155b6110695760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff16158015611094576000805460ff1961ff0019909116610100171660011790555b61101f6111db565b600054610100900460ff16806110b5575060005460ff16155b6110d15760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561101f576000805460ff1961ff0019909116610100171660011790558015611031576000805461ff001916905550565b600054610100900460ff1680611128575060005460ff16155b6111445760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561116f576000805460ff1961ff0019909116610100171660011790555b6000611179610b8d565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611031576000805461ff001916905550565b600054610100900460ff16806111f4575060005460ff16155b6112105760405162461bcd60e51b815260040161039b906118b5565b600054610100900460ff1615801561123b576000805460ff1961ff0019909116610100171660011790555b60016065558015611031576000805461ff001916905550565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b803561083f81611c65565b80356002811061083f57600080fd5b60006101608083850312156112c0578182fd5b6112c981611b7c565b9150506112d58261129e565b81526112e360208301611293565b60208201526112f460408301611293565b604082015261130560608301611293565b606082015261131660808301611293565b608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120611353818401611293565b818301525061014080830135818301525092915050565b60006060828403121561137b578081fd5b50919050565b600060208284031215611392578081fd5b813561139d81611c65565b9392505050565b600080600080608085870312156113b9578283fd5b84356113c481611c65565b935060208501356113d481611c65565b93969395505050506040820135916060013590565b6000806000606084860312156113fd578283fd5b835161140881611c65565b809350506020808501519250604085015167ffffffffffffffff8082111561142e578384fd5b818701915087601f830112611441578384fd5b81518181111561145357611453611c4f565b611465601f8201601f19168501611b7c565b9150808252888482850101111561147a578485fd5b845b8181101561149757838101850151838201860152840161147c565b818111156114a757858583850101525b50508093505050509250925092565b600080600080608085870312156114cb578384fd5b84356114d681611c65565b966020860135965060408601359560600135945092505050565b600060208284031215611501578081fd5b8151801515811461139d578182fd5b600060208284031215611521578081fd5b5035919050565b6000806080838503121561153a578182fd5b8235915061154b846020850161136a565b90509250929050565b60006101608284031215611566578081fd5b61139d83836112ad565b6000806101c08385031215611583578182fd5b61158d84846112ad565b915061154b84610160850161136a565b60008060006101e084860312156115b2578081fd5b6115bc85856112ad565b92506115cc85610160860161136a565b91506101c084013590509250925092565b60008061018083850312156115f0578182fd5b6115fa84846112ad565b94610160939093013593505050565b60006020828403121561161a578081fd5b813560ff8116811461139d578182fd5b6001600160a01b03169052565b6002811061165557634e487b7160e01b600052602160045260246000fd5b9052565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160e01b031991909116815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526021908201527f53616c653a204f72646572206e6f7420666f72207468697320636f6e747261636040820152601d60fa1b606082015260800190565b6020808252601f908201527f53616c653a20496e636f7272656374206f72646572207369676e617475726500604082015260600190565b6020808252601d908201527f53616c653a204f72646572206e6f7420666f7220746869732075736572000000604082015260600190565b6020808252601d908201527f53616c653a2053656e742076616c756520697320696e636f7272656374000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526018908201527f53616c653a20616d6f756e74206d757374206265203e20300000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f53616c653a204f7264657220616c726561647920636c6f736564206f7220717560408201526e0c2dce8d2e8f240e8dede40d0d2ced608b1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526014908201527353616c653a20416d6f756e7420746f6f2062696760601b604082015260600190565b600061016082019050611a37828451611637565b6020830151611a49602084018261162a565b506040830151611a5c604084018261162a565b506060830151611a6f606084018261162a565b506080830151611a82608084018261162a565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611ac08285018261162a565b505061014092830151919092015290565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201516001600160a01b03169181019190915260c00190565b9182526001600160a01b0316602082015260400190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b918252602082015260606040820181905260009082015260800190565b60405181810167ffffffffffffffff81118282101715611b9e57611b9e611c4f565b604052919050565b60008219821115611bb957611bb9611c39565b500190565b600060ff821660ff84168060ff03821115611bdb57611bdb611c39565b019392505050565b600082611bfe57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611c1d57611c1d611c39565b500290565b600082821015611c3457611c34611c39565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461103157600080fdfea2646970667358221220f1ee5e47211199487c45b9e4d217d05a96a3b741116792bcf58af02eccb62aba64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "computeValues((uint8,address,address,address,address,uint256,uint256,uint256,uint256,address,uint256),uint256)": {
        "details": "this function computes all the values that we need for the exchange. this can be called off-chain before buying so all values can be computed easily It will also help when we introduce tokens for payment"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverMessageSignature(bytes32,(uint8,bytes32,bytes32))": {
        "details": "verifies signature"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 136,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 139,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1873,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 346,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6760,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "sellerServiceFee",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 6762,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "buyerServiceFee",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 6764,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "beneficiary",
        "offset": 0,
        "slot": "153",
        "type": "t_address_payable"
      },
      {
        "astId": 6767,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "transferProxy",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ITransferProxy)5945"
      },
      {
        "astId": 6771,
        "contract": "contracts/Sales/WallkandaSale.sol:WallkandaSale",
        "label": "completed",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITransferProxy)5945": {
        "encoding": "inplace",
        "label": "contract ITransferProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}