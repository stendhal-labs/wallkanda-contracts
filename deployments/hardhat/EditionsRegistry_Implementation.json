{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "configurationURI",
          "type": "string"
        }
      ],
      "name": "ConfigurationURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RoyaltiesDefined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "addOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "proxyRegistryAddress_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "interactiveConfURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "royalties",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "royaltiesRecipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "minted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "prepareMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "removeOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "requireOperatorSignature",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferIdFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "artists",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeMintBatchForArtistsAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "interactiveConfURI",
          "type": "string"
        }
      ],
      "name": "setInteractiveConfURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd1032594838d7e7b50983aa76a599fdac9037a79b2999a6d086cd7a0ddd8e4d6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3437803",
    "logsBloom": "0x
    "blockHash": "0x4282eea1615215cbe121854383040834cdbd1360822f815065b43fd52aeb0daa",
    "transactionHash": "0xd1032594838d7e7b50983aa76a599fdac9037a79b2999a6d086cd7a0ddd8e4d6",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3437803",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "eb4b3ce853c645897f91d62849328f55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"configurationURI\",\"type\":\"string\"}],\"name\":\"ConfigurationURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RoyaltiesDefined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"addOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxyRegistryAddress_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"interactiveConfURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalties\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"prepareMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"removeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"requireOperatorSignature\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferIdFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"artists\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatchForArtistsAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"interactiveConfURI\",\"type\":\"string\"}],\"name\":\"setInteractiveConfURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"creator(uint256)\":{\"details\":\"returns `id`'s creator\"},\"mint(uint256,uint256,address,bytes,uint8,bytes32,bytes32)\":{\"details\":\"Minting function - With royalties Requirements: - An  Operator must have signed (msg.sender, data), which allows to link the mint to our off-chain data and to prove that the user has the right to mint\"},\"minted(uint256)\":{\"details\":\"Method to know if a token has already been minted or not\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token creation. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requireOperatorSignature(bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Verify that mint was aknowledge by an operator\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns an NFTs royalty payment information\",\"params\":{\"tokenId\":\"The identifier for an NFT\",\"value\":\"Purchase price of NFT\"},\"returns\":{\"receiver\":\"The royalty recipient address\",\"royaltyAmount\":\"Amount to be paid to the royalty recipient\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeBatchTransferIdFrom(address,address[],uint256,uint256[],bytes)\":{\"details\":\"allows to transfer one id to several recipient with corresponding amounts\"},\"safeMintBatchForArtistsAndTransfer(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"allows to create Batch NFTs and to send part of those to some recipient This function is a ONE TIME USE Use cases are \\\"Giveaways\\\" and things like this.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token creation. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"interactiveConfURI(uint256,address)\":{\"notice\":\"Configuration uri for tokenId\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\"},\"setBaseURI(string)\":{\"notice\":\"Function to let Owner set the baseURI\"},\"setInteractiveConfURI(uint256,address,string)\":{\"notice\":\"Function to let Owner set configurationURI\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EditionsRegistry.sol\":\"EditionsRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155Upgradeable).interfaceId\\n            || interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x9bd2707e55ec6da4d7f9c763d2e78ae7a954019deb798ed5bf59862cf1064b32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xd841c561258151c3c22f05feb68c702fc414b112606bd72b848e8a65af128c30\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa22cd3d499a04af4dbcc1b15877b69b611004ff02a2ab121e42226a6b6a88ab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/Access/OwnableOperatorControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nabstract contract OwnableOperatorControl is OwnableUpgradeable {\\n    event OperatorAdded(address indexed operator);\\n\\n    mapping(address => bool) private _operators;\\n\\n    function __OwnableOperatorControl_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    modifier onlyOperator() {\\n        require(isOperator(msg.sender), 'Role: not Operator');\\n        _;\\n    }\\n\\n    function isOperator(address address_) public view returns (bool) {\\n        return _operators[address_] == true;\\n    }\\n\\n    function addOperators(address[] calldata operators) external onlyOwner {\\n        for (uint256 i; i < operators.length; i++) {\\n            _addOperator(operators[i]);\\n        }\\n    }\\n\\n    function removeOperators(address[] calldata operators) external onlyOwner {\\n        for (uint256 i; i < operators.length; i++) {\\n            _operators[operators[i]] = false;\\n        }\\n    }\\n\\n    function _addOperator(address operator) internal {\\n        require(operator != address(0), 'Role: invalid Operator');\\n        _operators[operator] = true;\\n        emit OperatorAdded(operator);\\n    }\\n}\\n\",\"keccak256\":\"0x03faed077d7a060f9a5a83b657980978de4f41c444043409c3b0d9b9d2063352\",\"license\":\"MIT\"},\"contracts/Access/OwnerOperatorControlWithSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './OwnableOperatorControl.sol';\\n\\nabstract contract OwnerOperatorControlWithSignature is OwnableOperatorControl {\\n    /**\\n     * @dev Verify that mint was aknowledge by an operator\\n     */\\n    function requireOperatorSignature(\\n        bytes32 message,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public view {\\n        require(isOperator(recoverSigner(message, v, r, s)), 'Wrong Signature');\\n    }\\n\\n    // for whatever reason I can't get ECDSA.recover to work so let's go old school\\n    function recoverSigner(\\n        bytes32 message,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public pure returns (address) {\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        return\\n            ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        '\\\\x19Ethereum Signed Message:\\\\n32',\\n                        message\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc57777642c2d30612409ba20b43d4a05e0b00bdc1797001c0cbab6095d3a3744\",\"license\":\"MIT\"},\"contracts/EditionsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\n\\nimport './Access/OwnerOperatorControlWithSignature.sol';\\nimport './Tokens/ERC1155/ERC1155Configurable.sol';\\nimport './Tokens/ERC1155/ERC1155WithMetadata.sol';\\nimport './Tokens/ERC2981/ERC2981Royalties.sol';\\nimport './OpenSea/OpenSeaMandatory.sol';\\nimport './OpenSea/ProxyRegistry.sol';\\nimport './EditionsStorage.sol';\\n\\ncontract EditionsRegistry is\\n    OwnerOperatorControlWithSignature,\\n    PausableUpgradeable,\\n    ERC1155Configurable,\\n    ERC1155WithMetadata,\\n    ERC2981Royalties,\\n    OpenSeaMandatory,\\n    EditionsStorage\\n{\\n    event Mint(uint256 indexed tokenId, bytes indexed data);\\n\\n    function initialize(\\n        string memory uri,\\n        address minter,\\n        string memory contractURI_,\\n        address proxyRegistryAddress_\\n    ) public initializer {\\n        __OwnableOperatorControl_init(); // already inits context and ERC165\\n        __Pausable_init_unchained();\\n        __ERC1155WithMetadata_init(uri);\\n\\n        _addOperator(minter);\\n\\n        if (bytes(contractURI_).length != 0) {\\n            setContractURI(contractURI_);\\n        }\\n\\n        if (proxyRegistryAddress_ != address(0)) {\\n            proxyRegistryAddress = proxyRegistryAddress_;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC2981Royalties, ERC1155Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC2981Royalties.supportsInterface(interfaceId) ||\\n            ERC1155Upgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    receive() external payable {\\n        revert('No value accepted');\\n    }\\n\\n    /**\\n     * @dev Pauses all token creation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function pause() public virtual onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token creation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function unpause() public virtual onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Minting function - With royalties\\n     *\\n     * Requirements:\\n     * - An  Operator must have signed (msg.sender, data), which allows to link the mint\\n     * to our off-chain data and to prove that the user has the right to mint\\n     */\\n    function mint(\\n        uint256 supply,\\n        uint256 royalties,\\n        address royaltiesRecipient,\\n        bytes memory data,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        bytes32 message = prepareMessage(msg.sender, data);\\n        requireOperatorSignature(message, v, r, s);\\n        require(alreadyMinted[message] == false, 'ERC1155: Already minted');\\n\\n        // set\\n        alreadyMinted[message] = true;\\n\\n        // only one read\\n        uint256 _currentId = currentId + 1;\\n\\n        _mint(\\n            _currentId,\\n            msg.sender,\\n            supply,\\n            royaltiesRecipient,\\n            royalties,\\n            data\\n        );\\n\\n        currentId = _currentId;\\n    }\\n\\n    function burn(\\n        address owner,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(\\n            owner == _msgSender() || isApprovedForAll(owner, _msgSender()),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n\\n        _burn(owner, id, amount);\\n    }\\n\\n    function burnBatch(\\n        address owner,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external {\\n        require(\\n            owner == _msgSender() || isApprovedForAll(owner, _msgSender()),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n\\n        _burnBatch(owner, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev allows to transfer one id to several recipient with corresponding amounts\\n     */\\n    function safeBatchTransferIdFrom(\\n        address from,\\n        address[] memory recipients,\\n        uint256 id,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        require(\\n            recipients.length == amounts.length,\\n            'ERC1155: length mismatch'\\n        );\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            safeTransferFrom(from, recipients[i], id, amounts[i], data);\\n        }\\n    }\\n\\n    /**\\n     * @dev allows to create Batch NFTs and to send part of those to some recipient\\n     * This function is a ONE TIME USE\\n     *\\n     * Use cases are \\\"Giveaways\\\" and things like this.\\n     */\\n    function safeMintBatchForArtistsAndTransfer(\\n        address[] memory artists, // artist creator of the NFT\\n        uint256[] memory ids, // id of the NFTs\\n        uint256[] memory amounts, // amounts to create\\n        address recipient, // recipient\\n        bytes memory data\\n    ) public virtual onlyOwner {\\n        require(_safeMintBatchForArtistsAndTransferFlag == 0, 'Already used.');\\n\\n        // set flag to 2 so isApprovedForall is overrode\\n        _safeMintBatchForArtistsAndTransferFlag = 2;\\n\\n        require(\\n            artists.length == ids.length && artists.length == amounts.length,\\n            'ERC1155: length mismatch'\\n        );\\n\\n        uint256 _currentId = currentId;\\n        for (uint256 i; i < artists.length; i++) {\\n            // mint token for artist with 4% royalties\\n            _mint(\\n                _currentId + ids[i],\\n                artists[i],\\n                amounts[i],\\n                artists[i],\\n                400,\\n                data\\n            );\\n\\n            // transfer 1 to the recipient wallet\\n            safeTransferFrom(\\n                artists[i],\\n                recipient,\\n                _currentId + ids[i],\\n                1,\\n                data\\n            );\\n        }\\n\\n        // set current id to highest id\\n        currentId = ids[ids.length - 1];\\n\\n        // set flag to 1 so we can never use this function again\\n        _safeMintBatchForArtistsAndTransferFlag = 1;\\n    }\\n\\n    /**\\n     * Function to let Owner set the baseURI\\n     */\\n    function setBaseURI(string memory newuri) external onlyOwner {\\n        _setURI(newuri);\\n    }\\n\\n    /**\\n     * Function to let Owner set configurationURI\\n     */\\n    function setInteractiveConfURI(\\n        uint256 tokenId,\\n        address owner,\\n        string calldata interactiveConfURI\\n    ) public {\\n        require(\\n            owner == _msgSender() || isApprovedForAll(owner, _msgSender()),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _setInteractiveConfURI(tokenId, owner, interactiveConfURI);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        public\\n        view\\n        override\\n        returns (bool isOperator)\\n    {\\n        // this is used in the \\\"one time use\\\" function safeMintBatchForArtistsAndTransfer\\n        // in order to allow the team to mint a bunch of NFTs for some artists\\n        // and to transfer one of those NFTs to a given recipient\\n        // used for giveaways & co\\n        if (_safeMintBatchForArtistsAndTransferFlag == 2) {\\n            return true;\\n        }\\n\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        address openSeaRegistry = proxyRegistryAddress;\\n        if (openSeaRegistry != address(0)) {\\n            ProxyRegistry proxyRegistry = ProxyRegistry(openSeaRegistry);\\n            if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n                return true;\\n            }\\n        }\\n\\n        return ERC1155Upgradeable.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    function prepareMessage(address sender, bytes memory data)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(sender, data));\\n    }\\n\\n    /**\\n     * Internal function used to mint\\n     */\\n    function _mint(\\n        uint256 id,\\n        address creator_,\\n        uint256 supply,\\n        address royaltiesRecipient,\\n        uint256 royalties,\\n        bytes memory data\\n    ) internal {\\n        ERC1155Upgradeable._mint(creator_, id, supply, data);\\n\\n        // if specific uri\\n        _setMetadata(id, creator_);\\n\\n        // if royalties\\n        if (royalties > 0) {\\n            _setTokenRoyalty(id, royaltiesRecipient, royalties);\\n        }\\n\\n        emit Mint(id, data);\\n    }\\n}\\n\",\"keccak256\":\"0x0b4586b30e8d5f6c90834e4b1428f1a192df7558d00dae544b8c8278bce48da6\",\"license\":\"MIT\"},\"contracts/EditionsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract EditionsStorage {\\n    uint256 internal _safeMintBatchForArtistsAndTransferFlag;\\n    uint256 public currentId;\\n\\n    // messages already minted\\n    mapping(bytes32 => bool) internal alreadyMinted;\\n}\\n\",\"keccak256\":\"0xb77c62ade6d5e6e1d3512cfddeb45d93fc0472e5a754634d7b85bc339d3b67f6\",\"license\":\"MIT\"},\"contracts/OpenSea/OpenSeaMandatory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../Access/OwnableOperatorControl.sol';\\n\\n/**\\n * Functions required by OpenSea to get contract level metadata and collection Owner\\n */\\ncontract OpenSeaMandatory is OwnableOperatorControl {\\n    string private _contractURI;\\n    address public proxyRegistryAddress;\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function setContractURI(string memory contractURI_) public onlyOwner {\\n        _contractURI = contractURI_;\\n    }\\n}\\n\",\"keccak256\":\"0xe4ff11cd25a3d1bde98cb8fb134d2e0b5c9e25bb6fc98b26d1adfa1fa2d0119e\",\"license\":\"MIT\"},\"contracts/OpenSea/ProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0x95097ab57debcb82056b37b0f5fd7033500f7066637b190490b7673cc9a69ae3\",\"license\":\"MIT\"},\"contracts/Tokens/ERC1155/ERC1155Configurable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ERC1155Configurable {\\n    /**\\n     * @dev Emitted when `owner` sets a `configurationURI` for `tokenId`\\n     * there\\n     */\\n    event ConfigurationURI(\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        string configurationURI\\n    );\\n\\n    // map of tokenId => interactiveConfURI.\\n    mapping(uint256 => mapping(address => string)) private _interactiveConfURIs;\\n\\n    function _setInteractiveConfURI(\\n        uint256 tokenId,\\n        address owner,\\n        string calldata interactiveConfURI_\\n    ) internal virtual {\\n        _interactiveConfURIs[tokenId][owner] = interactiveConfURI_;\\n        emit ConfigurationURI(tokenId, owner, interactiveConfURI_);\\n    }\\n\\n    /**\\n     * Configuration uri for tokenId\\n     */\\n    function interactiveConfURI(uint256 tokenId, address owner)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        return _interactiveConfURIs[tokenId][owner];\\n    }\\n}\\n\",\"keccak256\":\"0x0fb31cdd49c7d374b90c969a86e9775a3e724e75c8b4303de168a8a22df1a194\",\"license\":\"MIT\"},\"contracts/Tokens/ERC1155/ERC1155WithMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\n\\nabstract contract ERC1155WithMetadata is ERC1155Upgradeable {\\n    mapping(uint256 => address) private _creators;\\n\\n    function __ERC1155WithMetadata_init(string memory uri_)\\n        internal\\n        initializer\\n    {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    /**\\n     * @dev Method to know if a token has already been minted or not\\n     */\\n    function minted(uint256 id) public view returns (bool) {\\n        return _creators[id] != address(0);\\n    }\\n\\n    /**\\n     * @dev returns `id`'s creator\\n     */\\n    function creator(uint256 id) public view returns (address) {\\n        return _creators[id];\\n    }\\n\\n    /**\\n     * @dev sets metadata for id\\n     */\\n    function _setMetadata(uint256 id, address _creator) internal {\\n        _creators[id] = _creator;\\n    }\\n}\\n\",\"keccak256\":\"0x138bddbc0e2b4e67762216ffc9bb9e5f54db4245720e6b0948b1586ed3e5b1b3\",\"license\":\"MIT\"},\"contracts/Tokens/ERC2981/ERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC2981Royalties.sol';\\n\\nabstract contract ERC2981Royalties is IERC2981Royalties {\\n    event RoyaltiesDefined(\\n        uint256 indexed id,\\n        address indexed recipient,\\n        uint256 value\\n    );\\n\\n    struct Royalty {\\n        address recipient;\\n        uint256 value;\\n    }\\n\\n    mapping(uint256 => Royalty) internal _royalties;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC2981Royalties).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Set Royalties\\n     *\\n     * Requirements:\\n     *\\n     * - value should be lte 100%\\n     * - recipient can not be address(0)\\n     */\\n    function _setTokenRoyalty(\\n        uint256 id,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        require(recipient != address(0), 'Royalties: Invalid recipient');\\n        require(value <= 10000, 'Royalties: Too high');\\n\\n        _royalties[id] = Royalty(recipient, value);\\n\\n        emit RoyaltiesDefined(id, recipient, value);\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        Royalty memory royalty = _royalties[tokenId];\\n\\n        if (royalty.recipient == address(0)) {\\n            return (address(0), 0);\\n        }\\n\\n        return (royalty.recipient, (value * royalty.value) / 10000);\\n    }\\n}\\n\",\"keccak256\":\"0xad432c6d28bda4b3e00ea4ad26edc4b0e060cf105bba6fc535ce6ab9b9eeb6da\",\"license\":\"MIT\"},\"contracts/Tokens/ERC2981/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\n/**\\n * Early implementation of EIP-2981 as of comment\\n * https://github.com/ethereum/EIPs/issues/2907#issuecomment-831352868\\n *\\n * Interface ID:\\n *\\n * bytes4(keccak256('royaltyInfo(uint256,uint256,bytes)')) == 0xc155531d\\n *\\n * =>  0xc155531d\\n */\\ninterface IERC2981Royalties is IERC165Upgradeable {\\n    /**\\n     * @dev Returns an NFTs royalty payment information\\n     *\\n     * @param tokenId  The identifier for an NFT\\n     * @param value Purchase price of NFT\\n     *\\n     * @return receiver The royalty recipient address\\n     * @return royaltyAmount Amount to be paid to the royalty recipient\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xe689bf4ec1570868cc4b76f0f86c7c9381abd2d277dc41f0cedb3a914025f453\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613d39806100206000396000f3fe6080604052600436106102125760003560e01c80638456cb5911610118578063d45167d0116100a0578063eeee9caf1161006f578063eeee9caf1461061f578063f242432a1461063f578063f2fde38b1461065f578063f5298aca1461067f578063f885ee9d1461069f57610238565b8063d45167d0146105b5578063e00dd161146105d5578063e8a3d485146105ea578063e985e9c5146105ff57610238565b8063995eedef116100e7578063995eedef14610520578063a07aea1c14610540578063a22cb46514610560578063cd7c032614610580578063d365a3771461059557610238565b80638456cb59146104b65780638da5cb5b146104cb57806391f0c0e8146104e0578063938e3d7b1461050057610238565b8063510b51581161019b5780636b20c4541161016a5780636b20c454146104215780636d70f7ae146104415780636e6174fe14610461578063715018a6146104815780637dc0bf3f1461049657610238565b8063510b51581461039f57806355f804b3146103cc5780635c975abb146103ec57806364c046b71461040157610238565b80632a55205a116101e25780632a55205a146102ef5780632b146fb31461031d5780632eb2c2d61461033d5780633f4ba83a1461035d5780634e1273f41461037257610238565b8062fdd58e1461023d57806301ffc9a7146102735780630e89341c146102a05780631ecfacee146102cd57610238565b366102385760405162461bcd60e51b815260040161022f9061353c565b60405180910390fd5b600080fd5b34801561024957600080fd5b5061025d610258366004612d76565b6106bf565b60405161026a91906133d9565b60405180910390f35b34801561027f57600080fd5b5061029361028e366004612f75565b610712565b60405161026a91906133ce565b3480156102ac57600080fd5b506102c06102bb366004613082565b610734565b60405161026a919061342f565b3480156102d957600080fd5b506102ed6102e8366004612ffb565b6107c8565b005b3480156102fb57600080fd5b5061030f61030a366004613141565b61089f565b60405161026a929190613374565b34801561032957600080fd5b506102ed6103383660046130be565b610912565b34801561034957600080fd5b506102ed610358366004612b12565b61096e565b34801561036957600080fd5b506102ed610bd7565b34801561037e57600080fd5b5061039261038d366004612e43565b610c20565b60405161026a919061338d565b3480156103ab57600080fd5b506103bf6103ba366004613082565b610d3f565b60405161026a9190613299565b3480156103d857600080fd5b506102ed6103e7366004612fc9565b610d5a565b3480156103f857600080fd5b50610293610da5565b34801561040d57600080fd5b506102ed61041c366004612f3b565b610daf565b34801561042d57600080fd5b506102ed61043c366004612c86565b610dda565b34801561044d57600080fd5b5061029361045c366004612ab7565b610e34565b34801561046d57600080fd5b506102ed61047c366004612e99565b610e57565b34801561048d57600080fd5b506102ed611076565b3480156104a257600080fd5b506102936104b1366004613082565b6110ff565b3480156104c257600080fd5b506102ed61111c565b3480156104d757600080fd5b506103bf611163565b3480156104ec57600080fd5b5061025d6104fb366004612d29565b611172565b34801561050c57600080fd5b506102ed61051b366004612fc9565b6111a5565b34801561052c57600080fd5b506102c061053b36600461309a565b6111fb565b34801561054c57600080fd5b506102ed61055b366004612dd5565b6112b2565b34801561056c57600080fd5b506102ed61057b366004612cf8565b61134b565b34801561058c57600080fd5b506103bf611419565b3480156105a157600080fd5b506102ed6105b0366004612dd5565b611429565b3480156105c157600080fd5b506103bf6105d0366004612f3b565b6114e8565b3480156105e157600080fd5b5061025d611583565b3480156105f657600080fd5b506102c061158a565b34801561060b57600080fd5b5061029361061a366004612ada565b61161c565b34801561062b57600080fd5b506102ed61063a366004612c21565b6116f6565b34801561064b57600080fd5b506102ed61065a366004612bbb565b611790565b34801561066b57600080fd5b506102ed61067a366004612ab7565b61192a565b34801561068b57600080fd5b506102ed61069a366004612da1565b6119eb565b3480156106ab57600080fd5b506102ed6106ba366004613162565b611a40565b60006001600160a01b0383166106e75760405162461bcd60e51b815260040161022f90613567565b50600081815260cb602090815260408083206001600160a01b03861684529091529020545b92915050565b600061071d82611af7565b8061072c575061072c82611b10565b90505b919050565b606060cd805461074390613bac565b80601f016020809104026020016040519081016040528092919081815260200182805461076f90613bac565b80156107bc5780601f10610791576101008083540402835291602001916107bc565b820191906000526020600020905b81548152906001019060200180831161079f57829003601f168201915b50505050509050919050565b600054610100900460ff16806107e1575060005460ff16155b6107fd5760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015610828576000805460ff1961ff0019909116610100171660011790555b610830611b50565b610838611bcc565b61084185611c4a565b61084a84611cc8565b82511561085a5761085a836111a5565b6001600160a01b038216156108865761010080546001600160a01b0319166001600160a01b0384161790555b8015610898576000805461ff00191690555b5050505050565b600082815260fe60209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282916108e657600080925092505061090b565b80516020820151612710906108fb9087613b4a565b6109059190613b2a565b92509250505b9250929050565b61091a611d3a565b6001600160a01b0316836001600160a01b0316148061094057506109408361061a611d3a565b61095c5760405162461bcd60e51b815260040161022f9061369c565b61096884848484611d3e565b50505050565b815183511461098f5760405162461bcd60e51b815260040161022f90613a0a565b6001600160a01b0384166109b55760405162461bcd60e51b815260040161022f90613763565b6109bd611d3a565b6001600160a01b0316856001600160a01b031614806109e357506109e38561061a611d3a565b6109ff5760405162461bcd60e51b815260040161022f906137a8565b6000610a09611d3a565b9050610a19818787878787610bcf565b60005b8451811015610b69576000858281518110610a4757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610a7357634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260cb835260408082206001600160a01b038e168352909352919091205490915081811015610ac45760405162461bcd60e51b815260040161022f9061388b565b610ace8282613b69565b60cb600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160cb600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b4e9190613aed565b9250508190555050505080610b6290613be7565b9050610a1c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610bb99291906133a0565b60405180910390a4610bcf818787878787611db6565b505050505050565b610bdf611d3a565b6001600160a01b0316610bf0611163565b6001600160a01b031614610c165760405162461bcd60e51b815260040161022f9061390c565b610c1e611ec4565b565b60608151835114610c435760405162461bcd60e51b815260040161022f906139c1565b600083516001600160401b03811115610c6c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c95578160200160208202803683370190505b50905060005b8451811015610d3757610cfc858281518110610cc757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610cef57634e487b7160e01b600052603260045260246000fd5b60200260200101516106bf565b828281518110610d1c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610d3081613be7565b9050610c9b565b509392505050565b600090815260fd60205260409020546001600160a01b031690565b610d62611d3a565b6001600160a01b0316610d73611163565b6001600160a01b031614610d995760405162461bcd60e51b815260040161022f9061390c565b610da281611f32565b50565b60665460ff165b90565b610dbe61045c858585856114e8565b6109685760405162461bcd60e51b815260040161022f90613673565b610de2611d3a565b6001600160a01b0316836001600160a01b03161480610e085750610e088361061a611d3a565b610e245760405162461bcd60e51b815260040161022f9061369c565b610e2f838383611f45565b505050565b6001600160a01b031660009081526065602052604090205460ff16151560011490565b610e5f611d3a565b6001600160a01b0316610e70611163565b6001600160a01b031614610e965760405162461bcd60e51b815260040161022f9061390c565b6101015415610eb75760405162461bcd60e51b815260040161022f9061373c565b60026101015583518551148015610ecf575082518551145b610eeb5760405162461bcd60e51b815260040161022f9061363c565b6101025460005b865181101561102b57610fb2868281518110610f1e57634e487b7160e01b600052603260045260246000fd5b602002602001015183610f319190613aed565b888381518110610f5157634e487b7160e01b600052603260045260246000fd5b6020026020010151878481518110610f7957634e487b7160e01b600052603260045260246000fd5b60200260200101518a8581518110610fa157634e487b7160e01b600052603260045260246000fd5b602002602001015161019088612106565b611019878281518110610fd557634e487b7160e01b600052603260045260246000fd5b602002602001015185888481518110610ffe57634e487b7160e01b600052603260045260246000fd5b6020026020010151856110119190613aed565b600187611790565b8061102381613be7565b915050610ef2565b50846001865161103b9190613b69565b8151811061105957634e487b7160e01b600052603260045260246000fd5b602090810291909101015161010255505060016101015550505050565b61107e611d3a565b6001600160a01b031661108f611163565b6001600160a01b0316146110b55760405162461bcd60e51b815260040161022f9061390c565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b600090815260fd60205260409020546001600160a01b0316151590565b611124611d3a565b6001600160a01b0316611135611163565b6001600160a01b03161461115b5760405162461bcd60e51b815260040161022f9061390c565b610c1e612175565b6033546001600160a01b031690565b60008282604051602001611187929190613350565b60405160208183030381529060405280519060200120905092915050565b6111ad611d3a565b6001600160a01b03166111be611163565b6001600160a01b0316146111e45760405162461bcd60e51b815260040161022f9061390c565b80516111f79060ff906020840190612860565b5050565b60008281526098602090815260408083206001600160a01b0385168452909152902080546060919061122c90613bac565b80601f016020809104026020016040519081016040528092919081815260200182805461125890613bac565b80156112a55780601f1061127a576101008083540402835291602001916112a5565b820191906000526020600020905b81548152906001019060200180831161128857829003601f168201915b5050505050905092915050565b6112ba611d3a565b6001600160a01b03166112cb611163565b6001600160a01b0316146112f15760405162461bcd60e51b815260040161022f9061390c565b60005b81811015610e2f5761133983838381811061131f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906113349190612ab7565b611cc8565b8061134381613be7565b9150506112f4565b816001600160a01b031661135d611d3a565b6001600160a01b031614156113845760405162461bcd60e51b815260040161022f90613978565b8060cc6000611391611d3a565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556113d5611d3a565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161140d91906133ce565b60405180910390a35050565b610100546001600160a01b031681565b611431611d3a565b6001600160a01b0316611442611163565b6001600160a01b0316146114685760405162461bcd60e51b815260040161022f9061390c565b60005b81811015610e2f5760006065600085858581811061149957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114ae9190612ab7565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806114e081613be7565b91505061146b565b6000601b8460ff16101561150457611501601b85613b05565b93505b6001856040516020016115179190613268565b604051602081830303815290604052805190602001208585856040516000815260200160405260405161154d94939291906133e2565b6020604051602081039080840390855afa15801561156f573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b6101025481565b606060ff805461159990613bac565b80601f01602080910402602001604051908101604052809291908181526020018280546115c590613bac565b80156116125780601f106115e757610100808354040283529160200191611612565b820191906000526020600020905b8154815290600101906020018083116115f557829003601f168201915b5050505050905090565b600061010154600214156116325750600161070c565b610100546001600160a01b031680156116e45760405163c455279160e01b815281906001600160a01b03808616919083169063c455279190611678908990600401613299565b60206040518083038186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190612fad565b6001600160a01b031614156116e25760019250505061070c565b505b6116ee84846121d0565b949350505050565b81518451146117175760405162461bcd60e51b815260040161022f9061363c565b60005b8451811015610bcf5761177e8686838151811061174757634e487b7160e01b600052603260045260246000fd5b60200260200101518686858151811061177057634e487b7160e01b600052603260045260246000fd5b602002602001015186611790565b8061178881613be7565b91505061171a565b6001600160a01b0384166117b65760405162461bcd60e51b815260040161022f90613763565b6117be611d3a565b6001600160a01b0316856001600160a01b031614806117e457506117e48561061a611d3a565b6118005760405162461bcd60e51b815260040161022f9061369c565b600061180a611d3a565b905061182a81878761181b886121fe565b611824886121fe565b87610bcf565b600084815260cb602090815260408083206001600160a01b038a1684529091529020548381101561186d5760405162461bcd60e51b815260040161022f9061388b565b6118778482613b69565b600086815260cb602090815260408083206001600160a01b038c811685529252808320939093558816815290812080548692906118b5908490613aed565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161190b929190613a93565b60405180910390a4611921828888888888612257565b50505050505050565b611932611d3a565b6001600160a01b0316611943611163565b6001600160a01b0316146119695760405162461bcd60e51b815260040161022f9061390c565b6001600160a01b03811661198f5760405162461bcd60e51b815260040161022f906135b2565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6119f3611d3a565b6001600160a01b0316836001600160a01b03161480611a195750611a198361061a611d3a565b611a355760405162461bcd60e51b815260040161022f9061369c565b610e2f838383612328565b611a48610da5565b15611a655760405162461bcd60e51b815260040161022f90613712565b6000611a713386611172565b9050611a7f81858585610daf565b6000818152610103602052604090205460ff1615611aaf5760405162461bcd60e51b815260040161022f906138d5565b600081815261010360205260408120805460ff1916600190811790915561010254611ad991613aed565b9050611ae981338b8a8c8b612106565b610102555050505050505050565b6001600160e01b0319811663152a902d60e11b14919050565b60006001600160e01b03198216636cdb3d1360e11b1480611b4157506001600160e01b031982166303a24d0760e21b145b8061072c575061072c82612445565b600054610100900460ff1680611b69575060005460ff16155b611b855760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611bb0576000805460ff1961ff0019909116610100171660011790555b611bb861245e565b8015610da2576000805461ff001916905550565b600054610100900460ff1680611be5575060005460ff16155b611c015760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611c2c576000805460ff1961ff0019909116610100171660011790555b6066805460ff191690558015610da2576000805461ff001916905550565b600054610100900460ff1680611c63575060005460ff16155b611c7f5760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611caa576000805460ff1961ff0019909116610100171660011790555b611cb3826124ce565b80156111f7576000805461ff00191690555050565b6001600160a01b038116611cee5760405162461bcd60e51b815260040161022f9061350c565b6001600160a01b038116600081815260656020526040808220805460ff19166001179055517fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d9190a250565b3390565b60008481526098602090815260408083206001600160a01b03871684529091529020611d6b9083836128e4565b50826001600160a01b0316847f9510e529f90f89b8e0d0478bc302a5469d8d14ffb7109ac85028e48f36c44bee8484604051611da8929190613400565b60405180910390a350505050565b611dc8846001600160a01b0316612537565b15610bcf5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e0190899089908890889088906004016132ad565b602060405180830381600087803b158015611e1b57600080fd5b505af1925050508015611e4b575060408051601f3d908101601f19168201909252611e4891810190612f91565b60015b611e9457611e57613c34565b80611e625750611e7c565b8060405162461bcd60e51b815260040161022f919061342f565b60405162461bcd60e51b815260040161022f90613442565b6001600160e01b0319811663bc197c8160e01b146119215760405162461bcd60e51b815260040161022f90613496565b611ecc610da5565b611ee85760405162461bcd60e51b815260040161022f906134de565b6066805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611f1b611d3a565b604051611f289190613299565b60405180910390a1565b80516111f79060cd906020840190612860565b6001600160a01b038316611f6b5760405162461bcd60e51b815260040161022f90613848565b8051825114611f8c5760405162461bcd60e51b815260040161022f90613a0a565b6000611f96611d3a565b9050611fb681856000868660405180602001604052806000815250610bcf565b60005b83518110156120a7576000848281518110611fe457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061201057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260cb835260408082206001600160a01b038c1683529093529190912054909150818110156120615760405162461bcd60e51b815260040161022f906135f8565b61206b8282613b69565b600093845260cb602090815260408086206001600160a01b038c168752909152909320929092555081905061209f81613be7565b915050611fb9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516120f89291906133a0565b60405180910390a450505050565b6121128587868461253d565b61211c868661261f565b811561212d5761212d86848461264d565b8060405161213b919061324c565b6040519081900381209087907ffe1509eb3817472ff35ecb79584292f0370b355967f797c0865cbff15e52d31390600090a3505050505050565b61217d610da5565b1561219a5760405162461bcd60e51b815260040161022f90613712565b6066805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f1b611d3a565b6001600160a01b03918216600090815260cc6020908152604080832093909416825291909152205460ff1690565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061224657634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612269846001600160a01b0316612537565b15610bcf5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906122a2908990899088908890889060040161330b565b602060405180830381600087803b1580156122bc57600080fd5b505af19250505080156122ec575060408051601f3d908101601f191682019092526122e991810190612f91565b60015b6122f857611e57613c34565b6001600160e01b0319811663f23a6e6160e01b146119215760405162461bcd60e51b815260040161022f90613496565b6001600160a01b03831661234e5760405162461bcd60e51b815260040161022f90613848565b6000612358611d3a565b90506123888185600061236a876121fe565b612373876121fe565b60405180602001604052806000815250610bcf565b600083815260cb602090815260408083206001600160a01b0388168452909152902054828110156123cb5760405162461bcd60e51b815260040161022f906135f8565b6123d58382613b69565b600085815260cb602090815260408083206001600160a01b03808b16808652919093528184209490945551919291908516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62906124369089908990613a93565b60405180910390a45050505050565b6001600160e01b031981166301ffc9a760e01b14919050565b600054610100900460ff1680612477575060005460ff16155b6124935760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff161580156124be576000805460ff1961ff0019909116610100171660011790555b6124c6612721565b611bb8612794565b600054610100900460ff16806124e7575060005460ff16155b6125035760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff1615801561252e576000805460ff1961ff0019909116610100171660011790555b611cb382611f32565b3b151590565b6001600160a01b0384166125635760405162461bcd60e51b815260040161022f90613a52565b600061256d611d3a565b905061257f8160008761181b886121fe565b600084815260cb602090815260408083206001600160a01b0389168452909152812080548592906125b1908490613aed565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612608929190613a93565b60405180910390a461089881600087878787612257565b600091825260fd602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0382166126735760405162461bcd60e51b815260040161022f90613941565b6127108111156126955760405162461bcd60e51b815260040161022f906136e5565b6040805180820182526001600160a01b038481168083526020808401868152600089815260fe90925290859020935184546001600160a01b03191693169290921783559051600190920191909155905184907f48088c08557ca46900507e5992528d0b09f68ff628983baa175716d6bcf7e4c3906127149085906133d9565b60405180910390a3505050565b600054610100900460ff168061273a575060005460ff16155b6127565760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611bb8576000805460ff1961ff0019909116610100171660011790558015610da2576000805461ff001916905550565b600054610100900460ff16806127ad575060005460ff16155b6127c95760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff161580156127f4576000805460ff1961ff0019909116610100171660011790555b60006127fe611d3a565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610da2576000805461ff001916905550565b82805461286c90613bac565b90600052602060002090601f01602090048101928261288e57600085556128d4565b82601f106128a757805160ff19168380011785556128d4565b828001600101855582156128d4579182015b828111156128d45782518255916020019190600101906128b9565b506128e0929150612958565b5090565b8280546128f090613bac565b90600052602060002090601f01602090048101928261291257600085556128d4565b82601f1061292b5782800160ff198235161785556128d4565b828001600101855582156128d4579182015b828111156128d457823582559160200191906001019061293d565b5b808211156128e05760008155600101612959565b600082601f83011261297d578081fd5b8135602061299261298d83613aca565b613aa1565b82815281810190858301838502870184018810156129ae578586fd5b855b858110156129d55781356129c381613cd8565b845292840192908401906001016129b0565b5090979650505050505050565b600082601f8301126129f2578081fd5b81356020612a0261298d83613aca565b8281528181019085830183850287018401881015612a1e578586fd5b855b858110156129d557813584529284019290840190600101612a20565b600082601f830112612a4c578081fd5b81356001600160401b03811115612a6557612a65613c18565b612a78601f8201601f1916602001613aa1565b818152846020838601011115612a8c578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461072f57600080fd5b600060208284031215612ac8578081fd5b8135612ad381613cd8565b9392505050565b60008060408385031215612aec578081fd5b8235612af781613cd8565b91506020830135612b0781613cd8565b809150509250929050565b600080600080600060a08688031215612b29578081fd5b8535612b3481613cd8565b94506020860135612b4481613cd8565b935060408601356001600160401b0380821115612b5f578283fd5b612b6b89838a016129e2565b94506060880135915080821115612b80578283fd5b612b8c89838a016129e2565b93506080880135915080821115612ba1578283fd5b50612bae88828901612a3c565b9150509295509295909350565b600080600080600060a08688031215612bd2578081fd5b8535612bdd81613cd8565b94506020860135612bed81613cd8565b9350604086013592506060860135915060808601356001600160401b03811115612c15578182fd5b612bae88828901612a3c565b600080600080600060a08688031215612c38578081fd5b8535612c4381613cd8565b945060208601356001600160401b0380821115612c5e578283fd5b612c6a89838a0161296d565b9550604088013594506060880135915080821115612b80578283fd5b600080600060608486031215612c9a578081fd5b8335612ca581613cd8565b925060208401356001600160401b0380821115612cc0578283fd5b612ccc878388016129e2565b93506040860135915080821115612ce1578283fd5b50612cee868287016129e2565b9150509250925092565b60008060408385031215612d0a578182fd5b8235612d1581613cd8565b915060208301358015158114612b07578182fd5b60008060408385031215612d3b578182fd5b8235612d4681613cd8565b915060208301356001600160401b03811115612d60578182fd5b612d6c85828601612a3c565b9150509250929050565b60008060408385031215612d88578182fd5b8235612d9381613cd8565b946020939093013593505050565b600080600060608486031215612db5578081fd5b8335612dc081613cd8565b95602085013595506040909401359392505050565b60008060208385031215612de7578182fd5b82356001600160401b0380821115612dfd578384fd5b818501915085601f830112612e10578384fd5b813581811115612e1e578485fd5b8660208083028501011115612e31578485fd5b60209290920196919550909350505050565b60008060408385031215612e55578182fd5b82356001600160401b0380821115612e6b578384fd5b612e778683870161296d565b93506020850135915080821115612e8c578283fd5b50612d6c858286016129e2565b600080600080600060a08688031215612eb0578283fd5b85356001600160401b0380821115612ec6578485fd5b612ed289838a0161296d565b96506020880135915080821115612ee7578485fd5b612ef389838a016129e2565b95506040880135915080821115612f08578485fd5b612f1489838a016129e2565b945060608801359150612f2682613cd8565b90925060808701359080821115612ba1578283fd5b60008060008060808587031215612f50578182fd5b84359350612f6060208601612aa6565b93969395505050506040820135916060013590565b600060208284031215612f86578081fd5b8135612ad381613ced565b600060208284031215612fa2578081fd5b8151612ad381613ced565b600060208284031215612fbe578081fd5b8151612ad381613cd8565b600060208284031215612fda578081fd5b81356001600160401b03811115612fef578182fd5b6116ee84828501612a3c565b60008060008060808587031215613010578182fd5b84356001600160401b0380821115613026578384fd5b61303288838901612a3c565b95506020870135915061304482613cd8565b90935060408601359080821115613059578384fd5b5061306687828801612a3c565b925050606085013561307781613cd8565b939692955090935050565b600060208284031215613093578081fd5b5035919050565b600080604083850312156130ac578182fd5b823591506020830135612b0781613cd8565b600080600080606085870312156130d3578182fd5b8435935060208501356130e581613cd8565b925060408501356001600160401b0380821115613100578384fd5b818701915087601f830112613113578384fd5b813581811115613121578485fd5b886020828501011115613132578485fd5b95989497505060200194505050565b60008060408385031215613153578182fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561317c578485fd5b8735965060208801359550604088013561319581613cd8565b945060608801356001600160401b038111156131af578283fd5b6131bb8a828b01612a3c565b9450506131ca60808901612aa6565b925060a0880135915060c0880135905092959891949750929550565b6000815180845260208085019450808401835b83811015613215578151875295820195908201906001016131f9565b509495945050505050565b60008151808452613238816020860160208601613b80565b601f01601f19169290920160200192915050565b6000825161325e818460208701613b80565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a0604082018190526000906132d9908301866131e6565b82810360608401526132eb81866131e6565b905082810360808401526132ff8185613220565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061334590830184613220565b979650505050505050565b6001600160a01b03831681526040602082018190526000906116ee90830184613220565b6001600160a01b03929092168252602082015260400190565b600060208252612ad360208301846131e6565b6000604082526133b360408301856131e6565b82810360208401526133c581856131e6565b95945050505050565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252612ad36020830184613220565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601690820152752937b6329d1034b73b30b634b21027b832b930ba37b960511b604082015260600190565b602080825260119082015270139bc81d985b1d59481858d8d95c1d1959607a1b604082015260600190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526018908201527f455243313135353a206c656e677468206d69736d617463680000000000000000604082015260600190565b6020808252600f908201526e57726f6e67205369676e617475726560881b604082015260600190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252601390820152720a4def2c2d8e8d2cae67440a8dede40d0d2ced606b1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252600d908201526c20b63932b0b23c903ab9b2b21760991b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526017908201527f455243313135353a20416c7265616479206d696e746564000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f526f79616c746965733a20496e76616c696420726563697069656e7400000000604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613ac257613ac2613c18565b604052919050565b60006001600160401b03821115613ae357613ae3613c18565b5060209081020190565b60008219821115613b0057613b00613c02565b500190565b600060ff821660ff84168060ff03821115613b2257613b22613c02565b019392505050565b600082613b4557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613b6457613b64613c02565b500290565b600082821015613b7b57613b7b613c02565b500390565b60005b83811015613b9b578181015183820152602001613b83565b838111156109685750506000910152565b600281046001821680613bc057607f821691505b60208210811415613be157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613bfb57613bfb613c02565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613c4457610dac565b600481823e6308c379a0613c588251613c2e565b14613c6257610dac565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613c915750505050610dac565b82840192508251915080821115613cab5750505050610dac565b503d83016020828401011115613cc357505050610dac565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114610da257600080fd5b6001600160e01b031981168114610da257600080fdfea264697066735822122075c056732026fd8ded850952f06227e50fd14af3da500eac51682ee3b738f35c64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106102125760003560e01c80638456cb5911610118578063d45167d0116100a0578063eeee9caf1161006f578063eeee9caf1461061f578063f242432a1461063f578063f2fde38b1461065f578063f5298aca1461067f578063f885ee9d1461069f57610238565b8063d45167d0146105b5578063e00dd161146105d5578063e8a3d485146105ea578063e985e9c5146105ff57610238565b8063995eedef116100e7578063995eedef14610520578063a07aea1c14610540578063a22cb46514610560578063cd7c032614610580578063d365a3771461059557610238565b80638456cb59146104b65780638da5cb5b146104cb57806391f0c0e8146104e0578063938e3d7b1461050057610238565b8063510b51581161019b5780636b20c4541161016a5780636b20c454146104215780636d70f7ae146104415780636e6174fe14610461578063715018a6146104815780637dc0bf3f1461049657610238565b8063510b51581461039f57806355f804b3146103cc5780635c975abb146103ec57806364c046b71461040157610238565b80632a55205a116101e25780632a55205a146102ef5780632b146fb31461031d5780632eb2c2d61461033d5780633f4ba83a1461035d5780634e1273f41461037257610238565b8062fdd58e1461023d57806301ffc9a7146102735780630e89341c146102a05780631ecfacee146102cd57610238565b366102385760405162461bcd60e51b815260040161022f9061353c565b60405180910390fd5b600080fd5b34801561024957600080fd5b5061025d610258366004612d76565b6106bf565b60405161026a91906133d9565b60405180910390f35b34801561027f57600080fd5b5061029361028e366004612f75565b610712565b60405161026a91906133ce565b3480156102ac57600080fd5b506102c06102bb366004613082565b610734565b60405161026a919061342f565b3480156102d957600080fd5b506102ed6102e8366004612ffb565b6107c8565b005b3480156102fb57600080fd5b5061030f61030a366004613141565b61089f565b60405161026a929190613374565b34801561032957600080fd5b506102ed6103383660046130be565b610912565b34801561034957600080fd5b506102ed610358366004612b12565b61096e565b34801561036957600080fd5b506102ed610bd7565b34801561037e57600080fd5b5061039261038d366004612e43565b610c20565b60405161026a919061338d565b3480156103ab57600080fd5b506103bf6103ba366004613082565b610d3f565b60405161026a9190613299565b3480156103d857600080fd5b506102ed6103e7366004612fc9565b610d5a565b3480156103f857600080fd5b50610293610da5565b34801561040d57600080fd5b506102ed61041c366004612f3b565b610daf565b34801561042d57600080fd5b506102ed61043c366004612c86565b610dda565b34801561044d57600080fd5b5061029361045c366004612ab7565b610e34565b34801561046d57600080fd5b506102ed61047c366004612e99565b610e57565b34801561048d57600080fd5b506102ed611076565b3480156104a257600080fd5b506102936104b1366004613082565b6110ff565b3480156104c257600080fd5b506102ed61111c565b3480156104d757600080fd5b506103bf611163565b3480156104ec57600080fd5b5061025d6104fb366004612d29565b611172565b34801561050c57600080fd5b506102ed61051b366004612fc9565b6111a5565b34801561052c57600080fd5b506102c061053b36600461309a565b6111fb565b34801561054c57600080fd5b506102ed61055b366004612dd5565b6112b2565b34801561056c57600080fd5b506102ed61057b366004612cf8565b61134b565b34801561058c57600080fd5b506103bf611419565b3480156105a157600080fd5b506102ed6105b0366004612dd5565b611429565b3480156105c157600080fd5b506103bf6105d0366004612f3b565b6114e8565b3480156105e157600080fd5b5061025d611583565b3480156105f657600080fd5b506102c061158a565b34801561060b57600080fd5b5061029361061a366004612ada565b61161c565b34801561062b57600080fd5b506102ed61063a366004612c21565b6116f6565b34801561064b57600080fd5b506102ed61065a366004612bbb565b611790565b34801561066b57600080fd5b506102ed61067a366004612ab7565b61192a565b34801561068b57600080fd5b506102ed61069a366004612da1565b6119eb565b3480156106ab57600080fd5b506102ed6106ba366004613162565b611a40565b60006001600160a01b0383166106e75760405162461bcd60e51b815260040161022f90613567565b50600081815260cb602090815260408083206001600160a01b03861684529091529020545b92915050565b600061071d82611af7565b8061072c575061072c82611b10565b90505b919050565b606060cd805461074390613bac565b80601f016020809104026020016040519081016040528092919081815260200182805461076f90613bac565b80156107bc5780601f10610791576101008083540402835291602001916107bc565b820191906000526020600020905b81548152906001019060200180831161079f57829003601f168201915b50505050509050919050565b600054610100900460ff16806107e1575060005460ff16155b6107fd5760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015610828576000805460ff1961ff0019909116610100171660011790555b610830611b50565b610838611bcc565b61084185611c4a565b61084a84611cc8565b82511561085a5761085a836111a5565b6001600160a01b038216156108865761010080546001600160a01b0319166001600160a01b0384161790555b8015610898576000805461ff00191690555b5050505050565b600082815260fe60209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282916108e657600080925092505061090b565b80516020820151612710906108fb9087613b4a565b6109059190613b2a565b92509250505b9250929050565b61091a611d3a565b6001600160a01b0316836001600160a01b0316148061094057506109408361061a611d3a565b61095c5760405162461bcd60e51b815260040161022f9061369c565b61096884848484611d3e565b50505050565b815183511461098f5760405162461bcd60e51b815260040161022f90613a0a565b6001600160a01b0384166109b55760405162461bcd60e51b815260040161022f90613763565b6109bd611d3a565b6001600160a01b0316856001600160a01b031614806109e357506109e38561061a611d3a565b6109ff5760405162461bcd60e51b815260040161022f906137a8565b6000610a09611d3a565b9050610a19818787878787610bcf565b60005b8451811015610b69576000858281518110610a4757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610a7357634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260cb835260408082206001600160a01b038e168352909352919091205490915081811015610ac45760405162461bcd60e51b815260040161022f9061388b565b610ace8282613b69565b60cb600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160cb600085815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610b4e9190613aed565b9250508190555050505080610b6290613be7565b9050610a1c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610bb99291906133a0565b60405180910390a4610bcf818787878787611db6565b505050505050565b610bdf611d3a565b6001600160a01b0316610bf0611163565b6001600160a01b031614610c165760405162461bcd60e51b815260040161022f9061390c565b610c1e611ec4565b565b60608151835114610c435760405162461bcd60e51b815260040161022f906139c1565b600083516001600160401b03811115610c6c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c95578160200160208202803683370190505b50905060005b8451811015610d3757610cfc858281518110610cc757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610cef57634e487b7160e01b600052603260045260246000fd5b60200260200101516106bf565b828281518110610d1c57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610d3081613be7565b9050610c9b565b509392505050565b600090815260fd60205260409020546001600160a01b031690565b610d62611d3a565b6001600160a01b0316610d73611163565b6001600160a01b031614610d995760405162461bcd60e51b815260040161022f9061390c565b610da281611f32565b50565b60665460ff165b90565b610dbe61045c858585856114e8565b6109685760405162461bcd60e51b815260040161022f90613673565b610de2611d3a565b6001600160a01b0316836001600160a01b03161480610e085750610e088361061a611d3a565b610e245760405162461bcd60e51b815260040161022f9061369c565b610e2f838383611f45565b505050565b6001600160a01b031660009081526065602052604090205460ff16151560011490565b610e5f611d3a565b6001600160a01b0316610e70611163565b6001600160a01b031614610e965760405162461bcd60e51b815260040161022f9061390c565b6101015415610eb75760405162461bcd60e51b815260040161022f9061373c565b60026101015583518551148015610ecf575082518551145b610eeb5760405162461bcd60e51b815260040161022f9061363c565b6101025460005b865181101561102b57610fb2868281518110610f1e57634e487b7160e01b600052603260045260246000fd5b602002602001015183610f319190613aed565b888381518110610f5157634e487b7160e01b600052603260045260246000fd5b6020026020010151878481518110610f7957634e487b7160e01b600052603260045260246000fd5b60200260200101518a8581518110610fa157634e487b7160e01b600052603260045260246000fd5b602002602001015161019088612106565b611019878281518110610fd557634e487b7160e01b600052603260045260246000fd5b602002602001015185888481518110610ffe57634e487b7160e01b600052603260045260246000fd5b6020026020010151856110119190613aed565b600187611790565b8061102381613be7565b915050610ef2565b50846001865161103b9190613b69565b8151811061105957634e487b7160e01b600052603260045260246000fd5b602090810291909101015161010255505060016101015550505050565b61107e611d3a565b6001600160a01b031661108f611163565b6001600160a01b0316146110b55760405162461bcd60e51b815260040161022f9061390c565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b600090815260fd60205260409020546001600160a01b0316151590565b611124611d3a565b6001600160a01b0316611135611163565b6001600160a01b03161461115b5760405162461bcd60e51b815260040161022f9061390c565b610c1e612175565b6033546001600160a01b031690565b60008282604051602001611187929190613350565b60405160208183030381529060405280519060200120905092915050565b6111ad611d3a565b6001600160a01b03166111be611163565b6001600160a01b0316146111e45760405162461bcd60e51b815260040161022f9061390c565b80516111f79060ff906020840190612860565b5050565b60008281526098602090815260408083206001600160a01b0385168452909152902080546060919061122c90613bac565b80601f016020809104026020016040519081016040528092919081815260200182805461125890613bac565b80156112a55780601f1061127a576101008083540402835291602001916112a5565b820191906000526020600020905b81548152906001019060200180831161128857829003601f168201915b5050505050905092915050565b6112ba611d3a565b6001600160a01b03166112cb611163565b6001600160a01b0316146112f15760405162461bcd60e51b815260040161022f9061390c565b60005b81811015610e2f5761133983838381811061131f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906113349190612ab7565b611cc8565b8061134381613be7565b9150506112f4565b816001600160a01b031661135d611d3a565b6001600160a01b031614156113845760405162461bcd60e51b815260040161022f90613978565b8060cc6000611391611d3a565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556113d5611d3a565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161140d91906133ce565b60405180910390a35050565b610100546001600160a01b031681565b611431611d3a565b6001600160a01b0316611442611163565b6001600160a01b0316146114685760405162461bcd60e51b815260040161022f9061390c565b60005b81811015610e2f5760006065600085858581811061149957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114ae9190612ab7565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806114e081613be7565b91505061146b565b6000601b8460ff16101561150457611501601b85613b05565b93505b6001856040516020016115179190613268565b604051602081830303815290604052805190602001208585856040516000815260200160405260405161154d94939291906133e2565b6020604051602081039080840390855afa15801561156f573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b6101025481565b606060ff805461159990613bac565b80601f01602080910402602001604051908101604052809291908181526020018280546115c590613bac565b80156116125780601f106115e757610100808354040283529160200191611612565b820191906000526020600020905b8154815290600101906020018083116115f557829003601f168201915b5050505050905090565b600061010154600214156116325750600161070c565b610100546001600160a01b031680156116e45760405163c455279160e01b815281906001600160a01b03808616919083169063c455279190611678908990600401613299565b60206040518083038186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190612fad565b6001600160a01b031614156116e25760019250505061070c565b505b6116ee84846121d0565b949350505050565b81518451146117175760405162461bcd60e51b815260040161022f9061363c565b60005b8451811015610bcf5761177e8686838151811061174757634e487b7160e01b600052603260045260246000fd5b60200260200101518686858151811061177057634e487b7160e01b600052603260045260246000fd5b602002602001015186611790565b8061178881613be7565b91505061171a565b6001600160a01b0384166117b65760405162461bcd60e51b815260040161022f90613763565b6117be611d3a565b6001600160a01b0316856001600160a01b031614806117e457506117e48561061a611d3a565b6118005760405162461bcd60e51b815260040161022f9061369c565b600061180a611d3a565b905061182a81878761181b886121fe565b611824886121fe565b87610bcf565b600084815260cb602090815260408083206001600160a01b038a1684529091529020548381101561186d5760405162461bcd60e51b815260040161022f9061388b565b6118778482613b69565b600086815260cb602090815260408083206001600160a01b038c811685529252808320939093558816815290812080548692906118b5908490613aed565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161190b929190613a93565b60405180910390a4611921828888888888612257565b50505050505050565b611932611d3a565b6001600160a01b0316611943611163565b6001600160a01b0316146119695760405162461bcd60e51b815260040161022f9061390c565b6001600160a01b03811661198f5760405162461bcd60e51b815260040161022f906135b2565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6119f3611d3a565b6001600160a01b0316836001600160a01b03161480611a195750611a198361061a611d3a565b611a355760405162461bcd60e51b815260040161022f9061369c565b610e2f838383612328565b611a48610da5565b15611a655760405162461bcd60e51b815260040161022f90613712565b6000611a713386611172565b9050611a7f81858585610daf565b6000818152610103602052604090205460ff1615611aaf5760405162461bcd60e51b815260040161022f906138d5565b600081815261010360205260408120805460ff1916600190811790915561010254611ad991613aed565b9050611ae981338b8a8c8b612106565b610102555050505050505050565b6001600160e01b0319811663152a902d60e11b14919050565b60006001600160e01b03198216636cdb3d1360e11b1480611b4157506001600160e01b031982166303a24d0760e21b145b8061072c575061072c82612445565b600054610100900460ff1680611b69575060005460ff16155b611b855760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611bb0576000805460ff1961ff0019909116610100171660011790555b611bb861245e565b8015610da2576000805461ff001916905550565b600054610100900460ff1680611be5575060005460ff16155b611c015760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611c2c576000805460ff1961ff0019909116610100171660011790555b6066805460ff191690558015610da2576000805461ff001916905550565b600054610100900460ff1680611c63575060005460ff16155b611c7f5760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611caa576000805460ff1961ff0019909116610100171660011790555b611cb3826124ce565b80156111f7576000805461ff00191690555050565b6001600160a01b038116611cee5760405162461bcd60e51b815260040161022f9061350c565b6001600160a01b038116600081815260656020526040808220805460ff19166001179055517fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d9190a250565b3390565b60008481526098602090815260408083206001600160a01b03871684529091529020611d6b9083836128e4565b50826001600160a01b0316847f9510e529f90f89b8e0d0478bc302a5469d8d14ffb7109ac85028e48f36c44bee8484604051611da8929190613400565b60405180910390a350505050565b611dc8846001600160a01b0316612537565b15610bcf5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e0190899089908890889088906004016132ad565b602060405180830381600087803b158015611e1b57600080fd5b505af1925050508015611e4b575060408051601f3d908101601f19168201909252611e4891810190612f91565b60015b611e9457611e57613c34565b80611e625750611e7c565b8060405162461bcd60e51b815260040161022f919061342f565b60405162461bcd60e51b815260040161022f90613442565b6001600160e01b0319811663bc197c8160e01b146119215760405162461bcd60e51b815260040161022f90613496565b611ecc610da5565b611ee85760405162461bcd60e51b815260040161022f906134de565b6066805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611f1b611d3a565b604051611f289190613299565b60405180910390a1565b80516111f79060cd906020840190612860565b6001600160a01b038316611f6b5760405162461bcd60e51b815260040161022f90613848565b8051825114611f8c5760405162461bcd60e51b815260040161022f90613a0a565b6000611f96611d3a565b9050611fb681856000868660405180602001604052806000815250610bcf565b60005b83518110156120a7576000848281518110611fe457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061201057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260cb835260408082206001600160a01b038c1683529093529190912054909150818110156120615760405162461bcd60e51b815260040161022f906135f8565b61206b8282613b69565b600093845260cb602090815260408086206001600160a01b038c168752909152909320929092555081905061209f81613be7565b915050611fb9565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516120f89291906133a0565b60405180910390a450505050565b6121128587868461253d565b61211c868661261f565b811561212d5761212d86848461264d565b8060405161213b919061324c565b6040519081900381209087907ffe1509eb3817472ff35ecb79584292f0370b355967f797c0865cbff15e52d31390600090a3505050505050565b61217d610da5565b1561219a5760405162461bcd60e51b815260040161022f90613712565b6066805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f1b611d3a565b6001600160a01b03918216600090815260cc6020908152604080832093909416825291909152205460ff1690565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061224657634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b612269846001600160a01b0316612537565b15610bcf5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906122a2908990899088908890889060040161330b565b602060405180830381600087803b1580156122bc57600080fd5b505af19250505080156122ec575060408051601f3d908101601f191682019092526122e991810190612f91565b60015b6122f857611e57613c34565b6001600160e01b0319811663f23a6e6160e01b146119215760405162461bcd60e51b815260040161022f90613496565b6001600160a01b03831661234e5760405162461bcd60e51b815260040161022f90613848565b6000612358611d3a565b90506123888185600061236a876121fe565b612373876121fe565b60405180602001604052806000815250610bcf565b600083815260cb602090815260408083206001600160a01b0388168452909152902054828110156123cb5760405162461bcd60e51b815260040161022f906135f8565b6123d58382613b69565b600085815260cb602090815260408083206001600160a01b03808b16808652919093528184209490945551919291908516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62906124369089908990613a93565b60405180910390a45050505050565b6001600160e01b031981166301ffc9a760e01b14919050565b600054610100900460ff1680612477575060005460ff16155b6124935760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff161580156124be576000805460ff1961ff0019909116610100171660011790555b6124c6612721565b611bb8612794565b600054610100900460ff16806124e7575060005460ff16155b6125035760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff1615801561252e576000805460ff1961ff0019909116610100171660011790555b611cb382611f32565b3b151590565b6001600160a01b0384166125635760405162461bcd60e51b815260040161022f90613a52565b600061256d611d3a565b905061257f8160008761181b886121fe565b600084815260cb602090815260408083206001600160a01b0389168452909152812080548592906125b1908490613aed565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612608929190613a93565b60405180910390a461089881600087878787612257565b600091825260fd602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6001600160a01b0382166126735760405162461bcd60e51b815260040161022f90613941565b6127108111156126955760405162461bcd60e51b815260040161022f906136e5565b6040805180820182526001600160a01b038481168083526020808401868152600089815260fe90925290859020935184546001600160a01b03191693169290921783559051600190920191909155905184907f48088c08557ca46900507e5992528d0b09f68ff628983baa175716d6bcf7e4c3906127149085906133d9565b60405180910390a3505050565b600054610100900460ff168061273a575060005460ff16155b6127565760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff16158015611bb8576000805460ff1961ff0019909116610100171660011790558015610da2576000805461ff001916905550565b600054610100900460ff16806127ad575060005460ff16155b6127c95760405162461bcd60e51b815260040161022f906137fa565b600054610100900460ff161580156127f4576000805460ff1961ff0019909116610100171660011790555b60006127fe611d3a565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610da2576000805461ff001916905550565b82805461286c90613bac565b90600052602060002090601f01602090048101928261288e57600085556128d4565b82601f106128a757805160ff19168380011785556128d4565b828001600101855582156128d4579182015b828111156128d45782518255916020019190600101906128b9565b506128e0929150612958565b5090565b8280546128f090613bac565b90600052602060002090601f01602090048101928261291257600085556128d4565b82601f1061292b5782800160ff198235161785556128d4565b828001600101855582156128d4579182015b828111156128d457823582559160200191906001019061293d565b5b808211156128e05760008155600101612959565b600082601f83011261297d578081fd5b8135602061299261298d83613aca565b613aa1565b82815281810190858301838502870184018810156129ae578586fd5b855b858110156129d55781356129c381613cd8565b845292840192908401906001016129b0565b5090979650505050505050565b600082601f8301126129f2578081fd5b81356020612a0261298d83613aca565b8281528181019085830183850287018401881015612a1e578586fd5b855b858110156129d557813584529284019290840190600101612a20565b600082601f830112612a4c578081fd5b81356001600160401b03811115612a6557612a65613c18565b612a78601f8201601f1916602001613aa1565b818152846020838601011115612a8c578283fd5b816020850160208301379081016020019190915292915050565b803560ff8116811461072f57600080fd5b600060208284031215612ac8578081fd5b8135612ad381613cd8565b9392505050565b60008060408385031215612aec578081fd5b8235612af781613cd8565b91506020830135612b0781613cd8565b809150509250929050565b600080600080600060a08688031215612b29578081fd5b8535612b3481613cd8565b94506020860135612b4481613cd8565b935060408601356001600160401b0380821115612b5f578283fd5b612b6b89838a016129e2565b94506060880135915080821115612b80578283fd5b612b8c89838a016129e2565b93506080880135915080821115612ba1578283fd5b50612bae88828901612a3c565b9150509295509295909350565b600080600080600060a08688031215612bd2578081fd5b8535612bdd81613cd8565b94506020860135612bed81613cd8565b9350604086013592506060860135915060808601356001600160401b03811115612c15578182fd5b612bae88828901612a3c565b600080600080600060a08688031215612c38578081fd5b8535612c4381613cd8565b945060208601356001600160401b0380821115612c5e578283fd5b612c6a89838a0161296d565b9550604088013594506060880135915080821115612b80578283fd5b600080600060608486031215612c9a578081fd5b8335612ca581613cd8565b925060208401356001600160401b0380821115612cc0578283fd5b612ccc878388016129e2565b93506040860135915080821115612ce1578283fd5b50612cee868287016129e2565b9150509250925092565b60008060408385031215612d0a578182fd5b8235612d1581613cd8565b915060208301358015158114612b07578182fd5b60008060408385031215612d3b578182fd5b8235612d4681613cd8565b915060208301356001600160401b03811115612d60578182fd5b612d6c85828601612a3c565b9150509250929050565b60008060408385031215612d88578182fd5b8235612d9381613cd8565b946020939093013593505050565b600080600060608486031215612db5578081fd5b8335612dc081613cd8565b95602085013595506040909401359392505050565b60008060208385031215612de7578182fd5b82356001600160401b0380821115612dfd578384fd5b818501915085601f830112612e10578384fd5b813581811115612e1e578485fd5b8660208083028501011115612e31578485fd5b60209290920196919550909350505050565b60008060408385031215612e55578182fd5b82356001600160401b0380821115612e6b578384fd5b612e778683870161296d565b93506020850135915080821115612e8c578283fd5b50612d6c858286016129e2565b600080600080600060a08688031215612eb0578283fd5b85356001600160401b0380821115612ec6578485fd5b612ed289838a0161296d565b96506020880135915080821115612ee7578485fd5b612ef389838a016129e2565b95506040880135915080821115612f08578485fd5b612f1489838a016129e2565b945060608801359150612f2682613cd8565b90925060808701359080821115612ba1578283fd5b60008060008060808587031215612f50578182fd5b84359350612f6060208601612aa6565b93969395505050506040820135916060013590565b600060208284031215612f86578081fd5b8135612ad381613ced565b600060208284031215612fa2578081fd5b8151612ad381613ced565b600060208284031215612fbe578081fd5b8151612ad381613cd8565b600060208284031215612fda578081fd5b81356001600160401b03811115612fef578182fd5b6116ee84828501612a3c565b60008060008060808587031215613010578182fd5b84356001600160401b0380821115613026578384fd5b61303288838901612a3c565b95506020870135915061304482613cd8565b90935060408601359080821115613059578384fd5b5061306687828801612a3c565b925050606085013561307781613cd8565b939692955090935050565b600060208284031215613093578081fd5b5035919050565b600080604083850312156130ac578182fd5b823591506020830135612b0781613cd8565b600080600080606085870312156130d3578182fd5b8435935060208501356130e581613cd8565b925060408501356001600160401b0380821115613100578384fd5b818701915087601f830112613113578384fd5b813581811115613121578485fd5b886020828501011115613132578485fd5b95989497505060200194505050565b60008060408385031215613153578182fd5b50508035926020909101359150565b600080600080600080600060e0888a03121561317c578485fd5b8735965060208801359550604088013561319581613cd8565b945060608801356001600160401b038111156131af578283fd5b6131bb8a828b01612a3c565b9450506131ca60808901612aa6565b925060a0880135915060c0880135905092959891949750929550565b6000815180845260208085019450808401835b83811015613215578151875295820195908201906001016131f9565b509495945050505050565b60008151808452613238816020860160208601613b80565b601f01601f19169290920160200192915050565b6000825161325e818460208701613b80565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a0604082018190526000906132d9908301866131e6565b82810360608401526132eb81866131e6565b905082810360808401526132ff8185613220565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061334590830184613220565b979650505050505050565b6001600160a01b03831681526040602082018190526000906116ee90830184613220565b6001600160a01b03929092168252602082015260400190565b600060208252612ad360208301846131e6565b6000604082526133b360408301856131e6565b82810360208401526133c581856131e6565b95945050505050565b901515815260200190565b90815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252612ad36020830184613220565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601690820152752937b6329d1034b73b30b634b21027b832b930ba37b960511b604082015260600190565b602080825260119082015270139bc81d985b1d59481858d8d95c1d1959607a1b604082015260600190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526018908201527f455243313135353a206c656e677468206d69736d617463680000000000000000604082015260600190565b6020808252600f908201526e57726f6e67205369676e617475726560881b604082015260600190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252601390820152720a4def2c2d8e8d2cae67440a8dede40d0d2ced606b1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252600d908201526c20b63932b0b23c903ab9b2b21760991b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526017908201527f455243313135353a20416c7265616479206d696e746564000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f526f79616c746965733a20496e76616c696420726563697069656e7400000000604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b918252602082015260400190565b6040518181016001600160401b0381118282101715613ac257613ac2613c18565b604052919050565b60006001600160401b03821115613ae357613ae3613c18565b5060209081020190565b60008219821115613b0057613b00613c02565b500190565b600060ff821660ff84168060ff03821115613b2257613b22613c02565b019392505050565b600082613b4557634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613b6457613b64613c02565b500290565b600082821015613b7b57613b7b613c02565b500390565b60005b83811015613b9b578181015183820152602001613b83565b838111156109685750506000910152565b600281046001821680613bc057607f821691505b60208210811415613be157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613bfb57613bfb613c02565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d1015613c4457610dac565b600481823e6308c379a0613c588251613c2e565b14613c6257610dac565b6040513d600319016004823e80513d6001600160401b038160248401118184111715613c915750505050610dac565b82840192508251915080821115613cab5750505050610dac565b503d83016020828401011115613cc357505050610dac565b601f01601f1916810160200160405291505090565b6001600160a01b0381168114610da257600080fd5b6001600160e01b031981168114610da257600080fdfea264697066735822122075c056732026fd8ded850952f06227e50fd14af3da500eac51682ee3b738f35c64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "creator(uint256)": {
        "details": "returns `id`'s creator"
      },
      "mint(uint256,uint256,address,bytes,uint8,bytes32,bytes32)": {
        "details": "Minting function - With royalties Requirements: - An  Operator must have signed (msg.sender, data), which allows to link the mint to our off-chain data and to prove that the user has the right to mint"
      },
      "minted(uint256)": {
        "details": "Method to know if a token has already been minted or not"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token creation. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requireOperatorSignature(bytes32,uint8,bytes32,bytes32)": {
        "details": "Verify that mint was aknowledge by an operator"
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns an NFTs royalty payment information",
        "params": {
          "tokenId": "The identifier for an NFT",
          "value": "Purchase price of NFT"
        },
        "returns": {
          "receiver": "The royalty recipient address",
          "royaltyAmount": "Amount to be paid to the royalty recipient"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeBatchTransferIdFrom(address,address[],uint256,uint256[],bytes)": {
        "details": "allows to transfer one id to several recipient with corresponding amounts"
      },
      "safeMintBatchForArtistsAndTransfer(address[],uint256[],uint256[],address,bytes)": {
        "details": "allows to create Batch NFTs and to send part of those to some recipient This function is a ONE TIME USE Use cases are \"Giveaways\" and things like this."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token creation. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "interactiveConfURI(uint256,address)": {
        "notice": "Configuration uri for tokenId"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings."
      },
      "setBaseURI(string)": {
        "notice": "Function to let Owner set the baseURI"
      },
      "setInteractiveConfURI(uint256,address,string)": {
        "notice": "Function to let Owner set configurationURI"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 136,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 139,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1873,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5061,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_operators",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 197,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_paused",
        "offset": 0,
        "slot": "102",
        "type": "t_bool"
      },
      {
        "astId": 288,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7783,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_interactiveConfURIs",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_string_storage))"
      },
      {
        "astId": 1919,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 376,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 382,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 384,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_uri",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 1406,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 7834,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_creators",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7916,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_royalties",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_struct(Royalty)7911_storage)"
      },
      {
        "astId": 5882,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_contractURI",
        "offset": 0,
        "slot": "255",
        "type": "t_string_storage"
      },
      {
        "astId": 5884,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 5867,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "_safeMintBatchForArtistsAndTransferFlag",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 5869,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "currentId",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 5873,
        "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
        "label": "alreadyMinted",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_string_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Royalty)7911_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Royalties.Royalty)",
        "numberOfBytes": "32",
        "value": "t_struct(Royalty)7911_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Royalty)7911_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Royalties.Royalty",
        "members": [
          {
            "astId": 7908,
            "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7910,
            "contract": "contracts/EditionsRegistry.sol:EditionsRegistry",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}